
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Produk
 * 
 */
export type Produk = $Result.DefaultSelection<Prisma.$ProdukPayload>
/**
 * Model ProdukStokKadaluarsa
 * 
 */
export type ProdukStokKadaluarsa = $Result.DefaultSelection<Prisma.$ProdukStokKadaluarsaPayload>
/**
 * Model ProdukMasuk
 * 
 */
export type ProdukMasuk = $Result.DefaultSelection<Prisma.$ProdukMasukPayload>
/**
 * Model ProdukKeluar
 * 
 */
export type ProdukKeluar = $Result.DefaultSelection<Prisma.$ProdukKeluarPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  KARYAWAN: 'KARYAWAN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const KategoriProduk: {
  OBAT_BEBAS: 'OBAT_BEBAS',
  OBAT_KERAS: 'OBAT_KERAS',
  KONSI: 'KONSI',
  ALKES: 'ALKES'
};

export type KategoriProduk = (typeof KategoriProduk)[keyof typeof KategoriProduk]


export const StatusKeluar: {
  TERJUAL: 'TERJUAL',
  KADALUARSA: 'KADALUARSA',
  RUSAK: 'RUSAK',
  TIDAK_SESUAI: 'TIDAK_SESUAI'
};

export type StatusKeluar = (typeof StatusKeluar)[keyof typeof StatusKeluar]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type KategoriProduk = $Enums.KategoriProduk

export const KategoriProduk: typeof $Enums.KategoriProduk

export type StatusKeluar = $Enums.StatusKeluar

export const StatusKeluar: typeof $Enums.StatusKeluar

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.produk`: Exposes CRUD operations for the **Produk** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produks
    * const produks = await prisma.produk.findMany()
    * ```
    */
  get produk(): Prisma.ProdukDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.produkStokKadaluarsa`: Exposes CRUD operations for the **ProdukStokKadaluarsa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProdukStokKadaluarsas
    * const produkStokKadaluarsas = await prisma.produkStokKadaluarsa.findMany()
    * ```
    */
  get produkStokKadaluarsa(): Prisma.ProdukStokKadaluarsaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.produkMasuk`: Exposes CRUD operations for the **ProdukMasuk** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProdukMasuks
    * const produkMasuks = await prisma.produkMasuk.findMany()
    * ```
    */
  get produkMasuk(): Prisma.ProdukMasukDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.produkKeluar`: Exposes CRUD operations for the **ProdukKeluar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProdukKeluars
    * const produkKeluars = await prisma.produkKeluar.findMany()
    * ```
    */
  get produkKeluar(): Prisma.ProdukKeluarDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Produk: 'Produk',
    ProdukStokKadaluarsa: 'ProdukStokKadaluarsa',
    ProdukMasuk: 'ProdukMasuk',
    ProdukKeluar: 'ProdukKeluar'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "produk" | "produkStokKadaluarsa" | "produkMasuk" | "produkKeluar"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Produk: {
        payload: Prisma.$ProdukPayload<ExtArgs>
        fields: Prisma.ProdukFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdukFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdukFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukPayload>
          }
          findFirst: {
            args: Prisma.ProdukFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdukFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukPayload>
          }
          findMany: {
            args: Prisma.ProdukFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukPayload>[]
          }
          create: {
            args: Prisma.ProdukCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukPayload>
          }
          createMany: {
            args: Prisma.ProdukCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProdukDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukPayload>
          }
          update: {
            args: Prisma.ProdukUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukPayload>
          }
          deleteMany: {
            args: Prisma.ProdukDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdukUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProdukUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukPayload>
          }
          aggregate: {
            args: Prisma.ProdukAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduk>
          }
          groupBy: {
            args: Prisma.ProdukGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdukGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdukCountArgs<ExtArgs>
            result: $Utils.Optional<ProdukCountAggregateOutputType> | number
          }
        }
      }
      ProdukStokKadaluarsa: {
        payload: Prisma.$ProdukStokKadaluarsaPayload<ExtArgs>
        fields: Prisma.ProdukStokKadaluarsaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdukStokKadaluarsaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukStokKadaluarsaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdukStokKadaluarsaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukStokKadaluarsaPayload>
          }
          findFirst: {
            args: Prisma.ProdukStokKadaluarsaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukStokKadaluarsaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdukStokKadaluarsaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukStokKadaluarsaPayload>
          }
          findMany: {
            args: Prisma.ProdukStokKadaluarsaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukStokKadaluarsaPayload>[]
          }
          create: {
            args: Prisma.ProdukStokKadaluarsaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukStokKadaluarsaPayload>
          }
          createMany: {
            args: Prisma.ProdukStokKadaluarsaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProdukStokKadaluarsaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukStokKadaluarsaPayload>
          }
          update: {
            args: Prisma.ProdukStokKadaluarsaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukStokKadaluarsaPayload>
          }
          deleteMany: {
            args: Prisma.ProdukStokKadaluarsaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdukStokKadaluarsaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProdukStokKadaluarsaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukStokKadaluarsaPayload>
          }
          aggregate: {
            args: Prisma.ProdukStokKadaluarsaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProdukStokKadaluarsa>
          }
          groupBy: {
            args: Prisma.ProdukStokKadaluarsaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdukStokKadaluarsaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdukStokKadaluarsaCountArgs<ExtArgs>
            result: $Utils.Optional<ProdukStokKadaluarsaCountAggregateOutputType> | number
          }
        }
      }
      ProdukMasuk: {
        payload: Prisma.$ProdukMasukPayload<ExtArgs>
        fields: Prisma.ProdukMasukFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdukMasukFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukMasukPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdukMasukFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukMasukPayload>
          }
          findFirst: {
            args: Prisma.ProdukMasukFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukMasukPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdukMasukFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukMasukPayload>
          }
          findMany: {
            args: Prisma.ProdukMasukFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukMasukPayload>[]
          }
          create: {
            args: Prisma.ProdukMasukCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukMasukPayload>
          }
          createMany: {
            args: Prisma.ProdukMasukCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProdukMasukDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukMasukPayload>
          }
          update: {
            args: Prisma.ProdukMasukUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukMasukPayload>
          }
          deleteMany: {
            args: Prisma.ProdukMasukDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdukMasukUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProdukMasukUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukMasukPayload>
          }
          aggregate: {
            args: Prisma.ProdukMasukAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProdukMasuk>
          }
          groupBy: {
            args: Prisma.ProdukMasukGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdukMasukGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdukMasukCountArgs<ExtArgs>
            result: $Utils.Optional<ProdukMasukCountAggregateOutputType> | number
          }
        }
      }
      ProdukKeluar: {
        payload: Prisma.$ProdukKeluarPayload<ExtArgs>
        fields: Prisma.ProdukKeluarFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdukKeluarFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukKeluarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdukKeluarFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukKeluarPayload>
          }
          findFirst: {
            args: Prisma.ProdukKeluarFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukKeluarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdukKeluarFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukKeluarPayload>
          }
          findMany: {
            args: Prisma.ProdukKeluarFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukKeluarPayload>[]
          }
          create: {
            args: Prisma.ProdukKeluarCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukKeluarPayload>
          }
          createMany: {
            args: Prisma.ProdukKeluarCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProdukKeluarDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukKeluarPayload>
          }
          update: {
            args: Prisma.ProdukKeluarUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukKeluarPayload>
          }
          deleteMany: {
            args: Prisma.ProdukKeluarDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdukKeluarUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProdukKeluarUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdukKeluarPayload>
          }
          aggregate: {
            args: Prisma.ProdukKeluarAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProdukKeluar>
          }
          groupBy: {
            args: Prisma.ProdukKeluarGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdukKeluarGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdukKeluarCountArgs<ExtArgs>
            result: $Utils.Optional<ProdukKeluarCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    produk?: ProdukOmit
    produkStokKadaluarsa?: ProdukStokKadaluarsaOmit
    produkMasuk?: ProdukMasukOmit
    produkKeluar?: ProdukKeluarOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    produkMasuk: number
    produkKeluar: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produkMasuk?: boolean | UserCountOutputTypeCountProdukMasukArgs
    produkKeluar?: boolean | UserCountOutputTypeCountProdukKeluarArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProdukMasukArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdukMasukWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProdukKeluarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdukKeluarWhereInput
  }


  /**
   * Count Type ProdukCountOutputType
   */

  export type ProdukCountOutputType = {
    stokBatch: number
    produkMasuk: number
    produkKeluar: number
  }

  export type ProdukCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stokBatch?: boolean | ProdukCountOutputTypeCountStokBatchArgs
    produkMasuk?: boolean | ProdukCountOutputTypeCountProdukMasukArgs
    produkKeluar?: boolean | ProdukCountOutputTypeCountProdukKeluarArgs
  }

  // Custom InputTypes
  /**
   * ProdukCountOutputType without action
   */
  export type ProdukCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukCountOutputType
     */
    select?: ProdukCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProdukCountOutputType without action
   */
  export type ProdukCountOutputTypeCountStokBatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdukStokKadaluarsaWhereInput
  }

  /**
   * ProdukCountOutputType without action
   */
  export type ProdukCountOutputTypeCountProdukMasukArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdukMasukWhereInput
  }

  /**
   * ProdukCountOutputType without action
   */
  export type ProdukCountOutputTypeCountProdukKeluarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdukKeluarWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    role: $Enums.UserRole
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    produkMasuk?: boolean | User$produkMasukArgs<ExtArgs>
    produkKeluar?: boolean | User$produkKeluarArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "role" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produkMasuk?: boolean | User$produkMasukArgs<ExtArgs>
    produkKeluar?: boolean | User$produkKeluarArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      produkMasuk: Prisma.$ProdukMasukPayload<ExtArgs>[]
      produkKeluar: Prisma.$ProdukKeluarPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      role: $Enums.UserRole
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    produkMasuk<T extends User$produkMasukArgs<ExtArgs> = {}>(args?: Subset<T, User$produkMasukArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdukMasukPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    produkKeluar<T extends User$produkKeluarArgs<ExtArgs> = {}>(args?: Subset<T, User$produkKeluarArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdukKeluarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.produkMasuk
   */
  export type User$produkMasukArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukMasuk
     */
    select?: ProdukMasukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukMasuk
     */
    omit?: ProdukMasukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukMasukInclude<ExtArgs> | null
    where?: ProdukMasukWhereInput
    orderBy?: ProdukMasukOrderByWithRelationInput | ProdukMasukOrderByWithRelationInput[]
    cursor?: ProdukMasukWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdukMasukScalarFieldEnum | ProdukMasukScalarFieldEnum[]
  }

  /**
   * User.produkKeluar
   */
  export type User$produkKeluarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukKeluar
     */
    select?: ProdukKeluarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukKeluar
     */
    omit?: ProdukKeluarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukKeluarInclude<ExtArgs> | null
    where?: ProdukKeluarWhereInput
    orderBy?: ProdukKeluarOrderByWithRelationInput | ProdukKeluarOrderByWithRelationInput[]
    cursor?: ProdukKeluarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdukKeluarScalarFieldEnum | ProdukKeluarScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Produk
   */

  export type AggregateProduk = {
    _count: ProdukCountAggregateOutputType | null
    _avg: ProdukAvgAggregateOutputType | null
    _sum: ProdukSumAggregateOutputType | null
    _min: ProdukMinAggregateOutputType | null
    _max: ProdukMaxAggregateOutputType | null
  }

  export type ProdukAvgAggregateOutputType = {
    id: number | null
    hargaModal: number | null
    hargaJual: number | null
    stok: number | null
  }

  export type ProdukSumAggregateOutputType = {
    id: number | null
    hargaModal: number | null
    hargaJual: number | null
    stok: number | null
  }

  export type ProdukMinAggregateOutputType = {
    id: number | null
    nama: string | null
    merk: string | null
    kodeProduk: string | null
    kategori: $Enums.KategoriProduk | null
    hargaModal: number | null
    hargaJual: number | null
    stok: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProdukMaxAggregateOutputType = {
    id: number | null
    nama: string | null
    merk: string | null
    kodeProduk: string | null
    kategori: $Enums.KategoriProduk | null
    hargaModal: number | null
    hargaJual: number | null
    stok: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProdukCountAggregateOutputType = {
    id: number
    nama: number
    merk: number
    kodeProduk: number
    kategori: number
    hargaModal: number
    hargaJual: number
    stok: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProdukAvgAggregateInputType = {
    id?: true
    hargaModal?: true
    hargaJual?: true
    stok?: true
  }

  export type ProdukSumAggregateInputType = {
    id?: true
    hargaModal?: true
    hargaJual?: true
    stok?: true
  }

  export type ProdukMinAggregateInputType = {
    id?: true
    nama?: true
    merk?: true
    kodeProduk?: true
    kategori?: true
    hargaModal?: true
    hargaJual?: true
    stok?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProdukMaxAggregateInputType = {
    id?: true
    nama?: true
    merk?: true
    kodeProduk?: true
    kategori?: true
    hargaModal?: true
    hargaJual?: true
    stok?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProdukCountAggregateInputType = {
    id?: true
    nama?: true
    merk?: true
    kodeProduk?: true
    kategori?: true
    hargaModal?: true
    hargaJual?: true
    stok?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProdukAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produk to aggregate.
     */
    where?: ProdukWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produks to fetch.
     */
    orderBy?: ProdukOrderByWithRelationInput | ProdukOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdukWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produks
    **/
    _count?: true | ProdukCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdukAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdukSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdukMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdukMaxAggregateInputType
  }

  export type GetProdukAggregateType<T extends ProdukAggregateArgs> = {
        [P in keyof T & keyof AggregateProduk]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduk[P]>
      : GetScalarType<T[P], AggregateProduk[P]>
  }




  export type ProdukGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdukWhereInput
    orderBy?: ProdukOrderByWithAggregationInput | ProdukOrderByWithAggregationInput[]
    by: ProdukScalarFieldEnum[] | ProdukScalarFieldEnum
    having?: ProdukScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdukCountAggregateInputType | true
    _avg?: ProdukAvgAggregateInputType
    _sum?: ProdukSumAggregateInputType
    _min?: ProdukMinAggregateInputType
    _max?: ProdukMaxAggregateInputType
  }

  export type ProdukGroupByOutputType = {
    id: number
    nama: string
    merk: string
    kodeProduk: string
    kategori: $Enums.KategoriProduk
    hargaModal: number
    hargaJual: number
    stok: number
    createdAt: Date
    updatedAt: Date
    _count: ProdukCountAggregateOutputType | null
    _avg: ProdukAvgAggregateOutputType | null
    _sum: ProdukSumAggregateOutputType | null
    _min: ProdukMinAggregateOutputType | null
    _max: ProdukMaxAggregateOutputType | null
  }

  type GetProdukGroupByPayload<T extends ProdukGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdukGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdukGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdukGroupByOutputType[P]>
            : GetScalarType<T[P], ProdukGroupByOutputType[P]>
        }
      >
    >


  export type ProdukSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nama?: boolean
    merk?: boolean
    kodeProduk?: boolean
    kategori?: boolean
    hargaModal?: boolean
    hargaJual?: boolean
    stok?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    stokBatch?: boolean | Produk$stokBatchArgs<ExtArgs>
    produkMasuk?: boolean | Produk$produkMasukArgs<ExtArgs>
    produkKeluar?: boolean | Produk$produkKeluarArgs<ExtArgs>
    _count?: boolean | ProdukCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produk"]>



  export type ProdukSelectScalar = {
    id?: boolean
    nama?: boolean
    merk?: boolean
    kodeProduk?: boolean
    kategori?: boolean
    hargaModal?: boolean
    hargaJual?: boolean
    stok?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProdukOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nama" | "merk" | "kodeProduk" | "kategori" | "hargaModal" | "hargaJual" | "stok" | "createdAt" | "updatedAt", ExtArgs["result"]["produk"]>
  export type ProdukInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stokBatch?: boolean | Produk$stokBatchArgs<ExtArgs>
    produkMasuk?: boolean | Produk$produkMasukArgs<ExtArgs>
    produkKeluar?: boolean | Produk$produkKeluarArgs<ExtArgs>
    _count?: boolean | ProdukCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProdukPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produk"
    objects: {
      stokBatch: Prisma.$ProdukStokKadaluarsaPayload<ExtArgs>[]
      produkMasuk: Prisma.$ProdukMasukPayload<ExtArgs>[]
      produkKeluar: Prisma.$ProdukKeluarPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nama: string
      merk: string
      kodeProduk: string
      kategori: $Enums.KategoriProduk
      hargaModal: number
      hargaJual: number
      stok: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["produk"]>
    composites: {}
  }

  type ProdukGetPayload<S extends boolean | null | undefined | ProdukDefaultArgs> = $Result.GetResult<Prisma.$ProdukPayload, S>

  type ProdukCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProdukFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProdukCountAggregateInputType | true
    }

  export interface ProdukDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produk'], meta: { name: 'Produk' } }
    /**
     * Find zero or one Produk that matches the filter.
     * @param {ProdukFindUniqueArgs} args - Arguments to find a Produk
     * @example
     * // Get one Produk
     * const produk = await prisma.produk.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdukFindUniqueArgs>(args: SelectSubset<T, ProdukFindUniqueArgs<ExtArgs>>): Prisma__ProdukClient<$Result.GetResult<Prisma.$ProdukPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Produk that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProdukFindUniqueOrThrowArgs} args - Arguments to find a Produk
     * @example
     * // Get one Produk
     * const produk = await prisma.produk.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdukFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdukFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdukClient<$Result.GetResult<Prisma.$ProdukPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Produk that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukFindFirstArgs} args - Arguments to find a Produk
     * @example
     * // Get one Produk
     * const produk = await prisma.produk.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdukFindFirstArgs>(args?: SelectSubset<T, ProdukFindFirstArgs<ExtArgs>>): Prisma__ProdukClient<$Result.GetResult<Prisma.$ProdukPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Produk that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukFindFirstOrThrowArgs} args - Arguments to find a Produk
     * @example
     * // Get one Produk
     * const produk = await prisma.produk.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdukFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdukFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdukClient<$Result.GetResult<Prisma.$ProdukPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Produks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produks
     * const produks = await prisma.produk.findMany()
     * 
     * // Get first 10 Produks
     * const produks = await prisma.produk.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produkWithIdOnly = await prisma.produk.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdukFindManyArgs>(args?: SelectSubset<T, ProdukFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdukPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Produk.
     * @param {ProdukCreateArgs} args - Arguments to create a Produk.
     * @example
     * // Create one Produk
     * const Produk = await prisma.produk.create({
     *   data: {
     *     // ... data to create a Produk
     *   }
     * })
     * 
     */
    create<T extends ProdukCreateArgs>(args: SelectSubset<T, ProdukCreateArgs<ExtArgs>>): Prisma__ProdukClient<$Result.GetResult<Prisma.$ProdukPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Produks.
     * @param {ProdukCreateManyArgs} args - Arguments to create many Produks.
     * @example
     * // Create many Produks
     * const produk = await prisma.produk.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdukCreateManyArgs>(args?: SelectSubset<T, ProdukCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produk.
     * @param {ProdukDeleteArgs} args - Arguments to delete one Produk.
     * @example
     * // Delete one Produk
     * const Produk = await prisma.produk.delete({
     *   where: {
     *     // ... filter to delete one Produk
     *   }
     * })
     * 
     */
    delete<T extends ProdukDeleteArgs>(args: SelectSubset<T, ProdukDeleteArgs<ExtArgs>>): Prisma__ProdukClient<$Result.GetResult<Prisma.$ProdukPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Produk.
     * @param {ProdukUpdateArgs} args - Arguments to update one Produk.
     * @example
     * // Update one Produk
     * const produk = await prisma.produk.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdukUpdateArgs>(args: SelectSubset<T, ProdukUpdateArgs<ExtArgs>>): Prisma__ProdukClient<$Result.GetResult<Prisma.$ProdukPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Produks.
     * @param {ProdukDeleteManyArgs} args - Arguments to filter Produks to delete.
     * @example
     * // Delete a few Produks
     * const { count } = await prisma.produk.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdukDeleteManyArgs>(args?: SelectSubset<T, ProdukDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produks
     * const produk = await prisma.produk.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdukUpdateManyArgs>(args: SelectSubset<T, ProdukUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produk.
     * @param {ProdukUpsertArgs} args - Arguments to update or create a Produk.
     * @example
     * // Update or create a Produk
     * const produk = await prisma.produk.upsert({
     *   create: {
     *     // ... data to create a Produk
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produk we want to update
     *   }
     * })
     */
    upsert<T extends ProdukUpsertArgs>(args: SelectSubset<T, ProdukUpsertArgs<ExtArgs>>): Prisma__ProdukClient<$Result.GetResult<Prisma.$ProdukPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Produks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukCountArgs} args - Arguments to filter Produks to count.
     * @example
     * // Count the number of Produks
     * const count = await prisma.produk.count({
     *   where: {
     *     // ... the filter for the Produks we want to count
     *   }
     * })
    **/
    count<T extends ProdukCountArgs>(
      args?: Subset<T, ProdukCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdukCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produk.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdukAggregateArgs>(args: Subset<T, ProdukAggregateArgs>): Prisma.PrismaPromise<GetProdukAggregateType<T>>

    /**
     * Group by Produk.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdukGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdukGroupByArgs['orderBy'] }
        : { orderBy?: ProdukGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdukGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdukGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produk model
   */
  readonly fields: ProdukFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produk.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdukClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stokBatch<T extends Produk$stokBatchArgs<ExtArgs> = {}>(args?: Subset<T, Produk$stokBatchArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdukStokKadaluarsaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    produkMasuk<T extends Produk$produkMasukArgs<ExtArgs> = {}>(args?: Subset<T, Produk$produkMasukArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdukMasukPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    produkKeluar<T extends Produk$produkKeluarArgs<ExtArgs> = {}>(args?: Subset<T, Produk$produkKeluarArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdukKeluarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Produk model
   */
  interface ProdukFieldRefs {
    readonly id: FieldRef<"Produk", 'Int'>
    readonly nama: FieldRef<"Produk", 'String'>
    readonly merk: FieldRef<"Produk", 'String'>
    readonly kodeProduk: FieldRef<"Produk", 'String'>
    readonly kategori: FieldRef<"Produk", 'KategoriProduk'>
    readonly hargaModal: FieldRef<"Produk", 'Float'>
    readonly hargaJual: FieldRef<"Produk", 'Float'>
    readonly stok: FieldRef<"Produk", 'Int'>
    readonly createdAt: FieldRef<"Produk", 'DateTime'>
    readonly updatedAt: FieldRef<"Produk", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Produk findUnique
   */
  export type ProdukFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produk
     */
    select?: ProdukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produk
     */
    omit?: ProdukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukInclude<ExtArgs> | null
    /**
     * Filter, which Produk to fetch.
     */
    where: ProdukWhereUniqueInput
  }

  /**
   * Produk findUniqueOrThrow
   */
  export type ProdukFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produk
     */
    select?: ProdukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produk
     */
    omit?: ProdukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukInclude<ExtArgs> | null
    /**
     * Filter, which Produk to fetch.
     */
    where: ProdukWhereUniqueInput
  }

  /**
   * Produk findFirst
   */
  export type ProdukFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produk
     */
    select?: ProdukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produk
     */
    omit?: ProdukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukInclude<ExtArgs> | null
    /**
     * Filter, which Produk to fetch.
     */
    where?: ProdukWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produks to fetch.
     */
    orderBy?: ProdukOrderByWithRelationInput | ProdukOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produks.
     */
    cursor?: ProdukWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produks.
     */
    distinct?: ProdukScalarFieldEnum | ProdukScalarFieldEnum[]
  }

  /**
   * Produk findFirstOrThrow
   */
  export type ProdukFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produk
     */
    select?: ProdukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produk
     */
    omit?: ProdukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukInclude<ExtArgs> | null
    /**
     * Filter, which Produk to fetch.
     */
    where?: ProdukWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produks to fetch.
     */
    orderBy?: ProdukOrderByWithRelationInput | ProdukOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produks.
     */
    cursor?: ProdukWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produks.
     */
    distinct?: ProdukScalarFieldEnum | ProdukScalarFieldEnum[]
  }

  /**
   * Produk findMany
   */
  export type ProdukFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produk
     */
    select?: ProdukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produk
     */
    omit?: ProdukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukInclude<ExtArgs> | null
    /**
     * Filter, which Produks to fetch.
     */
    where?: ProdukWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produks to fetch.
     */
    orderBy?: ProdukOrderByWithRelationInput | ProdukOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produks.
     */
    cursor?: ProdukWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produks.
     */
    skip?: number
    distinct?: ProdukScalarFieldEnum | ProdukScalarFieldEnum[]
  }

  /**
   * Produk create
   */
  export type ProdukCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produk
     */
    select?: ProdukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produk
     */
    omit?: ProdukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukInclude<ExtArgs> | null
    /**
     * The data needed to create a Produk.
     */
    data: XOR<ProdukCreateInput, ProdukUncheckedCreateInput>
  }

  /**
   * Produk createMany
   */
  export type ProdukCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produks.
     */
    data: ProdukCreateManyInput | ProdukCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Produk update
   */
  export type ProdukUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produk
     */
    select?: ProdukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produk
     */
    omit?: ProdukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukInclude<ExtArgs> | null
    /**
     * The data needed to update a Produk.
     */
    data: XOR<ProdukUpdateInput, ProdukUncheckedUpdateInput>
    /**
     * Choose, which Produk to update.
     */
    where: ProdukWhereUniqueInput
  }

  /**
   * Produk updateMany
   */
  export type ProdukUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produks.
     */
    data: XOR<ProdukUpdateManyMutationInput, ProdukUncheckedUpdateManyInput>
    /**
     * Filter which Produks to update
     */
    where?: ProdukWhereInput
    /**
     * Limit how many Produks to update.
     */
    limit?: number
  }

  /**
   * Produk upsert
   */
  export type ProdukUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produk
     */
    select?: ProdukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produk
     */
    omit?: ProdukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukInclude<ExtArgs> | null
    /**
     * The filter to search for the Produk to update in case it exists.
     */
    where: ProdukWhereUniqueInput
    /**
     * In case the Produk found by the `where` argument doesn't exist, create a new Produk with this data.
     */
    create: XOR<ProdukCreateInput, ProdukUncheckedCreateInput>
    /**
     * In case the Produk was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdukUpdateInput, ProdukUncheckedUpdateInput>
  }

  /**
   * Produk delete
   */
  export type ProdukDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produk
     */
    select?: ProdukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produk
     */
    omit?: ProdukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukInclude<ExtArgs> | null
    /**
     * Filter which Produk to delete.
     */
    where: ProdukWhereUniqueInput
  }

  /**
   * Produk deleteMany
   */
  export type ProdukDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produks to delete
     */
    where?: ProdukWhereInput
    /**
     * Limit how many Produks to delete.
     */
    limit?: number
  }

  /**
   * Produk.stokBatch
   */
  export type Produk$stokBatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukStokKadaluarsa
     */
    select?: ProdukStokKadaluarsaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukStokKadaluarsa
     */
    omit?: ProdukStokKadaluarsaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukStokKadaluarsaInclude<ExtArgs> | null
    where?: ProdukStokKadaluarsaWhereInput
    orderBy?: ProdukStokKadaluarsaOrderByWithRelationInput | ProdukStokKadaluarsaOrderByWithRelationInput[]
    cursor?: ProdukStokKadaluarsaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdukStokKadaluarsaScalarFieldEnum | ProdukStokKadaluarsaScalarFieldEnum[]
  }

  /**
   * Produk.produkMasuk
   */
  export type Produk$produkMasukArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukMasuk
     */
    select?: ProdukMasukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukMasuk
     */
    omit?: ProdukMasukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukMasukInclude<ExtArgs> | null
    where?: ProdukMasukWhereInput
    orderBy?: ProdukMasukOrderByWithRelationInput | ProdukMasukOrderByWithRelationInput[]
    cursor?: ProdukMasukWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdukMasukScalarFieldEnum | ProdukMasukScalarFieldEnum[]
  }

  /**
   * Produk.produkKeluar
   */
  export type Produk$produkKeluarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukKeluar
     */
    select?: ProdukKeluarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukKeluar
     */
    omit?: ProdukKeluarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukKeluarInclude<ExtArgs> | null
    where?: ProdukKeluarWhereInput
    orderBy?: ProdukKeluarOrderByWithRelationInput | ProdukKeluarOrderByWithRelationInput[]
    cursor?: ProdukKeluarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdukKeluarScalarFieldEnum | ProdukKeluarScalarFieldEnum[]
  }

  /**
   * Produk without action
   */
  export type ProdukDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produk
     */
    select?: ProdukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produk
     */
    omit?: ProdukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukInclude<ExtArgs> | null
  }


  /**
   * Model ProdukStokKadaluarsa
   */

  export type AggregateProdukStokKadaluarsa = {
    _count: ProdukStokKadaluarsaCountAggregateOutputType | null
    _avg: ProdukStokKadaluarsaAvgAggregateOutputType | null
    _sum: ProdukStokKadaluarsaSumAggregateOutputType | null
    _min: ProdukStokKadaluarsaMinAggregateOutputType | null
    _max: ProdukStokKadaluarsaMaxAggregateOutputType | null
  }

  export type ProdukStokKadaluarsaAvgAggregateOutputType = {
    id: number | null
    produkId: number | null
    stokAwal: number | null
    sisaStok: number | null
  }

  export type ProdukStokKadaluarsaSumAggregateOutputType = {
    id: number | null
    produkId: number | null
    stokAwal: number | null
    sisaStok: number | null
  }

  export type ProdukStokKadaluarsaMinAggregateOutputType = {
    id: number | null
    produkId: number | null
    stokAwal: number | null
    sisaStok: number | null
    tanggalExp: Date | null
  }

  export type ProdukStokKadaluarsaMaxAggregateOutputType = {
    id: number | null
    produkId: number | null
    stokAwal: number | null
    sisaStok: number | null
    tanggalExp: Date | null
  }

  export type ProdukStokKadaluarsaCountAggregateOutputType = {
    id: number
    produkId: number
    stokAwal: number
    sisaStok: number
    tanggalExp: number
    _all: number
  }


  export type ProdukStokKadaluarsaAvgAggregateInputType = {
    id?: true
    produkId?: true
    stokAwal?: true
    sisaStok?: true
  }

  export type ProdukStokKadaluarsaSumAggregateInputType = {
    id?: true
    produkId?: true
    stokAwal?: true
    sisaStok?: true
  }

  export type ProdukStokKadaluarsaMinAggregateInputType = {
    id?: true
    produkId?: true
    stokAwal?: true
    sisaStok?: true
    tanggalExp?: true
  }

  export type ProdukStokKadaluarsaMaxAggregateInputType = {
    id?: true
    produkId?: true
    stokAwal?: true
    sisaStok?: true
    tanggalExp?: true
  }

  export type ProdukStokKadaluarsaCountAggregateInputType = {
    id?: true
    produkId?: true
    stokAwal?: true
    sisaStok?: true
    tanggalExp?: true
    _all?: true
  }

  export type ProdukStokKadaluarsaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdukStokKadaluarsa to aggregate.
     */
    where?: ProdukStokKadaluarsaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdukStokKadaluarsas to fetch.
     */
    orderBy?: ProdukStokKadaluarsaOrderByWithRelationInput | ProdukStokKadaluarsaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdukStokKadaluarsaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdukStokKadaluarsas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdukStokKadaluarsas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProdukStokKadaluarsas
    **/
    _count?: true | ProdukStokKadaluarsaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdukStokKadaluarsaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdukStokKadaluarsaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdukStokKadaluarsaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdukStokKadaluarsaMaxAggregateInputType
  }

  export type GetProdukStokKadaluarsaAggregateType<T extends ProdukStokKadaluarsaAggregateArgs> = {
        [P in keyof T & keyof AggregateProdukStokKadaluarsa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdukStokKadaluarsa[P]>
      : GetScalarType<T[P], AggregateProdukStokKadaluarsa[P]>
  }




  export type ProdukStokKadaluarsaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdukStokKadaluarsaWhereInput
    orderBy?: ProdukStokKadaluarsaOrderByWithAggregationInput | ProdukStokKadaluarsaOrderByWithAggregationInput[]
    by: ProdukStokKadaluarsaScalarFieldEnum[] | ProdukStokKadaluarsaScalarFieldEnum
    having?: ProdukStokKadaluarsaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdukStokKadaluarsaCountAggregateInputType | true
    _avg?: ProdukStokKadaluarsaAvgAggregateInputType
    _sum?: ProdukStokKadaluarsaSumAggregateInputType
    _min?: ProdukStokKadaluarsaMinAggregateInputType
    _max?: ProdukStokKadaluarsaMaxAggregateInputType
  }

  export type ProdukStokKadaluarsaGroupByOutputType = {
    id: number
    produkId: number
    stokAwal: number
    sisaStok: number
    tanggalExp: Date | null
    _count: ProdukStokKadaluarsaCountAggregateOutputType | null
    _avg: ProdukStokKadaluarsaAvgAggregateOutputType | null
    _sum: ProdukStokKadaluarsaSumAggregateOutputType | null
    _min: ProdukStokKadaluarsaMinAggregateOutputType | null
    _max: ProdukStokKadaluarsaMaxAggregateOutputType | null
  }

  type GetProdukStokKadaluarsaGroupByPayload<T extends ProdukStokKadaluarsaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdukStokKadaluarsaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdukStokKadaluarsaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdukStokKadaluarsaGroupByOutputType[P]>
            : GetScalarType<T[P], ProdukStokKadaluarsaGroupByOutputType[P]>
        }
      >
    >


  export type ProdukStokKadaluarsaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    produkId?: boolean
    stokAwal?: boolean
    sisaStok?: boolean
    tanggalExp?: boolean
    produk?: boolean | ProdukDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produkStokKadaluarsa"]>



  export type ProdukStokKadaluarsaSelectScalar = {
    id?: boolean
    produkId?: boolean
    stokAwal?: boolean
    sisaStok?: boolean
    tanggalExp?: boolean
  }

  export type ProdukStokKadaluarsaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "produkId" | "stokAwal" | "sisaStok" | "tanggalExp", ExtArgs["result"]["produkStokKadaluarsa"]>
  export type ProdukStokKadaluarsaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produk?: boolean | ProdukDefaultArgs<ExtArgs>
  }

  export type $ProdukStokKadaluarsaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProdukStokKadaluarsa"
    objects: {
      produk: Prisma.$ProdukPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      produkId: number
      stokAwal: number
      sisaStok: number
      tanggalExp: Date | null
    }, ExtArgs["result"]["produkStokKadaluarsa"]>
    composites: {}
  }

  type ProdukStokKadaluarsaGetPayload<S extends boolean | null | undefined | ProdukStokKadaluarsaDefaultArgs> = $Result.GetResult<Prisma.$ProdukStokKadaluarsaPayload, S>

  type ProdukStokKadaluarsaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProdukStokKadaluarsaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProdukStokKadaluarsaCountAggregateInputType | true
    }

  export interface ProdukStokKadaluarsaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProdukStokKadaluarsa'], meta: { name: 'ProdukStokKadaluarsa' } }
    /**
     * Find zero or one ProdukStokKadaluarsa that matches the filter.
     * @param {ProdukStokKadaluarsaFindUniqueArgs} args - Arguments to find a ProdukStokKadaluarsa
     * @example
     * // Get one ProdukStokKadaluarsa
     * const produkStokKadaluarsa = await prisma.produkStokKadaluarsa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdukStokKadaluarsaFindUniqueArgs>(args: SelectSubset<T, ProdukStokKadaluarsaFindUniqueArgs<ExtArgs>>): Prisma__ProdukStokKadaluarsaClient<$Result.GetResult<Prisma.$ProdukStokKadaluarsaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProdukStokKadaluarsa that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProdukStokKadaluarsaFindUniqueOrThrowArgs} args - Arguments to find a ProdukStokKadaluarsa
     * @example
     * // Get one ProdukStokKadaluarsa
     * const produkStokKadaluarsa = await prisma.produkStokKadaluarsa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdukStokKadaluarsaFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdukStokKadaluarsaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdukStokKadaluarsaClient<$Result.GetResult<Prisma.$ProdukStokKadaluarsaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProdukStokKadaluarsa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukStokKadaluarsaFindFirstArgs} args - Arguments to find a ProdukStokKadaluarsa
     * @example
     * // Get one ProdukStokKadaluarsa
     * const produkStokKadaluarsa = await prisma.produkStokKadaluarsa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdukStokKadaluarsaFindFirstArgs>(args?: SelectSubset<T, ProdukStokKadaluarsaFindFirstArgs<ExtArgs>>): Prisma__ProdukStokKadaluarsaClient<$Result.GetResult<Prisma.$ProdukStokKadaluarsaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProdukStokKadaluarsa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukStokKadaluarsaFindFirstOrThrowArgs} args - Arguments to find a ProdukStokKadaluarsa
     * @example
     * // Get one ProdukStokKadaluarsa
     * const produkStokKadaluarsa = await prisma.produkStokKadaluarsa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdukStokKadaluarsaFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdukStokKadaluarsaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdukStokKadaluarsaClient<$Result.GetResult<Prisma.$ProdukStokKadaluarsaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProdukStokKadaluarsas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukStokKadaluarsaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProdukStokKadaluarsas
     * const produkStokKadaluarsas = await prisma.produkStokKadaluarsa.findMany()
     * 
     * // Get first 10 ProdukStokKadaluarsas
     * const produkStokKadaluarsas = await prisma.produkStokKadaluarsa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produkStokKadaluarsaWithIdOnly = await prisma.produkStokKadaluarsa.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdukStokKadaluarsaFindManyArgs>(args?: SelectSubset<T, ProdukStokKadaluarsaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdukStokKadaluarsaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProdukStokKadaluarsa.
     * @param {ProdukStokKadaluarsaCreateArgs} args - Arguments to create a ProdukStokKadaluarsa.
     * @example
     * // Create one ProdukStokKadaluarsa
     * const ProdukStokKadaluarsa = await prisma.produkStokKadaluarsa.create({
     *   data: {
     *     // ... data to create a ProdukStokKadaluarsa
     *   }
     * })
     * 
     */
    create<T extends ProdukStokKadaluarsaCreateArgs>(args: SelectSubset<T, ProdukStokKadaluarsaCreateArgs<ExtArgs>>): Prisma__ProdukStokKadaluarsaClient<$Result.GetResult<Prisma.$ProdukStokKadaluarsaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProdukStokKadaluarsas.
     * @param {ProdukStokKadaluarsaCreateManyArgs} args - Arguments to create many ProdukStokKadaluarsas.
     * @example
     * // Create many ProdukStokKadaluarsas
     * const produkStokKadaluarsa = await prisma.produkStokKadaluarsa.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdukStokKadaluarsaCreateManyArgs>(args?: SelectSubset<T, ProdukStokKadaluarsaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProdukStokKadaluarsa.
     * @param {ProdukStokKadaluarsaDeleteArgs} args - Arguments to delete one ProdukStokKadaluarsa.
     * @example
     * // Delete one ProdukStokKadaluarsa
     * const ProdukStokKadaluarsa = await prisma.produkStokKadaluarsa.delete({
     *   where: {
     *     // ... filter to delete one ProdukStokKadaluarsa
     *   }
     * })
     * 
     */
    delete<T extends ProdukStokKadaluarsaDeleteArgs>(args: SelectSubset<T, ProdukStokKadaluarsaDeleteArgs<ExtArgs>>): Prisma__ProdukStokKadaluarsaClient<$Result.GetResult<Prisma.$ProdukStokKadaluarsaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProdukStokKadaluarsa.
     * @param {ProdukStokKadaluarsaUpdateArgs} args - Arguments to update one ProdukStokKadaluarsa.
     * @example
     * // Update one ProdukStokKadaluarsa
     * const produkStokKadaluarsa = await prisma.produkStokKadaluarsa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdukStokKadaluarsaUpdateArgs>(args: SelectSubset<T, ProdukStokKadaluarsaUpdateArgs<ExtArgs>>): Prisma__ProdukStokKadaluarsaClient<$Result.GetResult<Prisma.$ProdukStokKadaluarsaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProdukStokKadaluarsas.
     * @param {ProdukStokKadaluarsaDeleteManyArgs} args - Arguments to filter ProdukStokKadaluarsas to delete.
     * @example
     * // Delete a few ProdukStokKadaluarsas
     * const { count } = await prisma.produkStokKadaluarsa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdukStokKadaluarsaDeleteManyArgs>(args?: SelectSubset<T, ProdukStokKadaluarsaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProdukStokKadaluarsas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukStokKadaluarsaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProdukStokKadaluarsas
     * const produkStokKadaluarsa = await prisma.produkStokKadaluarsa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdukStokKadaluarsaUpdateManyArgs>(args: SelectSubset<T, ProdukStokKadaluarsaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProdukStokKadaluarsa.
     * @param {ProdukStokKadaluarsaUpsertArgs} args - Arguments to update or create a ProdukStokKadaluarsa.
     * @example
     * // Update or create a ProdukStokKadaluarsa
     * const produkStokKadaluarsa = await prisma.produkStokKadaluarsa.upsert({
     *   create: {
     *     // ... data to create a ProdukStokKadaluarsa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProdukStokKadaluarsa we want to update
     *   }
     * })
     */
    upsert<T extends ProdukStokKadaluarsaUpsertArgs>(args: SelectSubset<T, ProdukStokKadaluarsaUpsertArgs<ExtArgs>>): Prisma__ProdukStokKadaluarsaClient<$Result.GetResult<Prisma.$ProdukStokKadaluarsaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProdukStokKadaluarsas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukStokKadaluarsaCountArgs} args - Arguments to filter ProdukStokKadaluarsas to count.
     * @example
     * // Count the number of ProdukStokKadaluarsas
     * const count = await prisma.produkStokKadaluarsa.count({
     *   where: {
     *     // ... the filter for the ProdukStokKadaluarsas we want to count
     *   }
     * })
    **/
    count<T extends ProdukStokKadaluarsaCountArgs>(
      args?: Subset<T, ProdukStokKadaluarsaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdukStokKadaluarsaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProdukStokKadaluarsa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukStokKadaluarsaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdukStokKadaluarsaAggregateArgs>(args: Subset<T, ProdukStokKadaluarsaAggregateArgs>): Prisma.PrismaPromise<GetProdukStokKadaluarsaAggregateType<T>>

    /**
     * Group by ProdukStokKadaluarsa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukStokKadaluarsaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdukStokKadaluarsaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdukStokKadaluarsaGroupByArgs['orderBy'] }
        : { orderBy?: ProdukStokKadaluarsaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdukStokKadaluarsaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdukStokKadaluarsaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProdukStokKadaluarsa model
   */
  readonly fields: ProdukStokKadaluarsaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProdukStokKadaluarsa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdukStokKadaluarsaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    produk<T extends ProdukDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProdukDefaultArgs<ExtArgs>>): Prisma__ProdukClient<$Result.GetResult<Prisma.$ProdukPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProdukStokKadaluarsa model
   */
  interface ProdukStokKadaluarsaFieldRefs {
    readonly id: FieldRef<"ProdukStokKadaluarsa", 'Int'>
    readonly produkId: FieldRef<"ProdukStokKadaluarsa", 'Int'>
    readonly stokAwal: FieldRef<"ProdukStokKadaluarsa", 'Int'>
    readonly sisaStok: FieldRef<"ProdukStokKadaluarsa", 'Int'>
    readonly tanggalExp: FieldRef<"ProdukStokKadaluarsa", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProdukStokKadaluarsa findUnique
   */
  export type ProdukStokKadaluarsaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukStokKadaluarsa
     */
    select?: ProdukStokKadaluarsaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukStokKadaluarsa
     */
    omit?: ProdukStokKadaluarsaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukStokKadaluarsaInclude<ExtArgs> | null
    /**
     * Filter, which ProdukStokKadaluarsa to fetch.
     */
    where: ProdukStokKadaluarsaWhereUniqueInput
  }

  /**
   * ProdukStokKadaluarsa findUniqueOrThrow
   */
  export type ProdukStokKadaluarsaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukStokKadaluarsa
     */
    select?: ProdukStokKadaluarsaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukStokKadaluarsa
     */
    omit?: ProdukStokKadaluarsaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukStokKadaluarsaInclude<ExtArgs> | null
    /**
     * Filter, which ProdukStokKadaluarsa to fetch.
     */
    where: ProdukStokKadaluarsaWhereUniqueInput
  }

  /**
   * ProdukStokKadaluarsa findFirst
   */
  export type ProdukStokKadaluarsaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukStokKadaluarsa
     */
    select?: ProdukStokKadaluarsaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukStokKadaluarsa
     */
    omit?: ProdukStokKadaluarsaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukStokKadaluarsaInclude<ExtArgs> | null
    /**
     * Filter, which ProdukStokKadaluarsa to fetch.
     */
    where?: ProdukStokKadaluarsaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdukStokKadaluarsas to fetch.
     */
    orderBy?: ProdukStokKadaluarsaOrderByWithRelationInput | ProdukStokKadaluarsaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdukStokKadaluarsas.
     */
    cursor?: ProdukStokKadaluarsaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdukStokKadaluarsas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdukStokKadaluarsas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdukStokKadaluarsas.
     */
    distinct?: ProdukStokKadaluarsaScalarFieldEnum | ProdukStokKadaluarsaScalarFieldEnum[]
  }

  /**
   * ProdukStokKadaluarsa findFirstOrThrow
   */
  export type ProdukStokKadaluarsaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukStokKadaluarsa
     */
    select?: ProdukStokKadaluarsaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukStokKadaluarsa
     */
    omit?: ProdukStokKadaluarsaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukStokKadaluarsaInclude<ExtArgs> | null
    /**
     * Filter, which ProdukStokKadaluarsa to fetch.
     */
    where?: ProdukStokKadaluarsaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdukStokKadaluarsas to fetch.
     */
    orderBy?: ProdukStokKadaluarsaOrderByWithRelationInput | ProdukStokKadaluarsaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdukStokKadaluarsas.
     */
    cursor?: ProdukStokKadaluarsaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdukStokKadaluarsas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdukStokKadaluarsas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdukStokKadaluarsas.
     */
    distinct?: ProdukStokKadaluarsaScalarFieldEnum | ProdukStokKadaluarsaScalarFieldEnum[]
  }

  /**
   * ProdukStokKadaluarsa findMany
   */
  export type ProdukStokKadaluarsaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukStokKadaluarsa
     */
    select?: ProdukStokKadaluarsaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukStokKadaluarsa
     */
    omit?: ProdukStokKadaluarsaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukStokKadaluarsaInclude<ExtArgs> | null
    /**
     * Filter, which ProdukStokKadaluarsas to fetch.
     */
    where?: ProdukStokKadaluarsaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdukStokKadaluarsas to fetch.
     */
    orderBy?: ProdukStokKadaluarsaOrderByWithRelationInput | ProdukStokKadaluarsaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProdukStokKadaluarsas.
     */
    cursor?: ProdukStokKadaluarsaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdukStokKadaluarsas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdukStokKadaluarsas.
     */
    skip?: number
    distinct?: ProdukStokKadaluarsaScalarFieldEnum | ProdukStokKadaluarsaScalarFieldEnum[]
  }

  /**
   * ProdukStokKadaluarsa create
   */
  export type ProdukStokKadaluarsaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukStokKadaluarsa
     */
    select?: ProdukStokKadaluarsaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukStokKadaluarsa
     */
    omit?: ProdukStokKadaluarsaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukStokKadaluarsaInclude<ExtArgs> | null
    /**
     * The data needed to create a ProdukStokKadaluarsa.
     */
    data: XOR<ProdukStokKadaluarsaCreateInput, ProdukStokKadaluarsaUncheckedCreateInput>
  }

  /**
   * ProdukStokKadaluarsa createMany
   */
  export type ProdukStokKadaluarsaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProdukStokKadaluarsas.
     */
    data: ProdukStokKadaluarsaCreateManyInput | ProdukStokKadaluarsaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProdukStokKadaluarsa update
   */
  export type ProdukStokKadaluarsaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukStokKadaluarsa
     */
    select?: ProdukStokKadaluarsaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukStokKadaluarsa
     */
    omit?: ProdukStokKadaluarsaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukStokKadaluarsaInclude<ExtArgs> | null
    /**
     * The data needed to update a ProdukStokKadaluarsa.
     */
    data: XOR<ProdukStokKadaluarsaUpdateInput, ProdukStokKadaluarsaUncheckedUpdateInput>
    /**
     * Choose, which ProdukStokKadaluarsa to update.
     */
    where: ProdukStokKadaluarsaWhereUniqueInput
  }

  /**
   * ProdukStokKadaluarsa updateMany
   */
  export type ProdukStokKadaluarsaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProdukStokKadaluarsas.
     */
    data: XOR<ProdukStokKadaluarsaUpdateManyMutationInput, ProdukStokKadaluarsaUncheckedUpdateManyInput>
    /**
     * Filter which ProdukStokKadaluarsas to update
     */
    where?: ProdukStokKadaluarsaWhereInput
    /**
     * Limit how many ProdukStokKadaluarsas to update.
     */
    limit?: number
  }

  /**
   * ProdukStokKadaluarsa upsert
   */
  export type ProdukStokKadaluarsaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukStokKadaluarsa
     */
    select?: ProdukStokKadaluarsaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukStokKadaluarsa
     */
    omit?: ProdukStokKadaluarsaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukStokKadaluarsaInclude<ExtArgs> | null
    /**
     * The filter to search for the ProdukStokKadaluarsa to update in case it exists.
     */
    where: ProdukStokKadaluarsaWhereUniqueInput
    /**
     * In case the ProdukStokKadaluarsa found by the `where` argument doesn't exist, create a new ProdukStokKadaluarsa with this data.
     */
    create: XOR<ProdukStokKadaluarsaCreateInput, ProdukStokKadaluarsaUncheckedCreateInput>
    /**
     * In case the ProdukStokKadaluarsa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdukStokKadaluarsaUpdateInput, ProdukStokKadaluarsaUncheckedUpdateInput>
  }

  /**
   * ProdukStokKadaluarsa delete
   */
  export type ProdukStokKadaluarsaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukStokKadaluarsa
     */
    select?: ProdukStokKadaluarsaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukStokKadaluarsa
     */
    omit?: ProdukStokKadaluarsaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukStokKadaluarsaInclude<ExtArgs> | null
    /**
     * Filter which ProdukStokKadaluarsa to delete.
     */
    where: ProdukStokKadaluarsaWhereUniqueInput
  }

  /**
   * ProdukStokKadaluarsa deleteMany
   */
  export type ProdukStokKadaluarsaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdukStokKadaluarsas to delete
     */
    where?: ProdukStokKadaluarsaWhereInput
    /**
     * Limit how many ProdukStokKadaluarsas to delete.
     */
    limit?: number
  }

  /**
   * ProdukStokKadaluarsa without action
   */
  export type ProdukStokKadaluarsaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukStokKadaluarsa
     */
    select?: ProdukStokKadaluarsaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukStokKadaluarsa
     */
    omit?: ProdukStokKadaluarsaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukStokKadaluarsaInclude<ExtArgs> | null
  }


  /**
   * Model ProdukMasuk
   */

  export type AggregateProdukMasuk = {
    _count: ProdukMasukCountAggregateOutputType | null
    _avg: ProdukMasukAvgAggregateOutputType | null
    _sum: ProdukMasukSumAggregateOutputType | null
    _min: ProdukMasukMinAggregateOutputType | null
    _max: ProdukMasukMaxAggregateOutputType | null
  }

  export type ProdukMasukAvgAggregateOutputType = {
    id: number | null
    produkId: number | null
    userId: number | null
    jumlah: number | null
    hargaModal: number | null
  }

  export type ProdukMasukSumAggregateOutputType = {
    id: number | null
    produkId: number | null
    userId: number | null
    jumlah: number | null
    hargaModal: number | null
  }

  export type ProdukMasukMinAggregateOutputType = {
    id: number | null
    produkId: number | null
    userId: number | null
    jumlah: number | null
    hargaModal: number | null
    tanggalMasuk: Date | null
    tanggalExp: Date | null
  }

  export type ProdukMasukMaxAggregateOutputType = {
    id: number | null
    produkId: number | null
    userId: number | null
    jumlah: number | null
    hargaModal: number | null
    tanggalMasuk: Date | null
    tanggalExp: Date | null
  }

  export type ProdukMasukCountAggregateOutputType = {
    id: number
    produkId: number
    userId: number
    jumlah: number
    hargaModal: number
    tanggalMasuk: number
    tanggalExp: number
    _all: number
  }


  export type ProdukMasukAvgAggregateInputType = {
    id?: true
    produkId?: true
    userId?: true
    jumlah?: true
    hargaModal?: true
  }

  export type ProdukMasukSumAggregateInputType = {
    id?: true
    produkId?: true
    userId?: true
    jumlah?: true
    hargaModal?: true
  }

  export type ProdukMasukMinAggregateInputType = {
    id?: true
    produkId?: true
    userId?: true
    jumlah?: true
    hargaModal?: true
    tanggalMasuk?: true
    tanggalExp?: true
  }

  export type ProdukMasukMaxAggregateInputType = {
    id?: true
    produkId?: true
    userId?: true
    jumlah?: true
    hargaModal?: true
    tanggalMasuk?: true
    tanggalExp?: true
  }

  export type ProdukMasukCountAggregateInputType = {
    id?: true
    produkId?: true
    userId?: true
    jumlah?: true
    hargaModal?: true
    tanggalMasuk?: true
    tanggalExp?: true
    _all?: true
  }

  export type ProdukMasukAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdukMasuk to aggregate.
     */
    where?: ProdukMasukWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdukMasuks to fetch.
     */
    orderBy?: ProdukMasukOrderByWithRelationInput | ProdukMasukOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdukMasukWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdukMasuks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdukMasuks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProdukMasuks
    **/
    _count?: true | ProdukMasukCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdukMasukAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdukMasukSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdukMasukMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdukMasukMaxAggregateInputType
  }

  export type GetProdukMasukAggregateType<T extends ProdukMasukAggregateArgs> = {
        [P in keyof T & keyof AggregateProdukMasuk]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdukMasuk[P]>
      : GetScalarType<T[P], AggregateProdukMasuk[P]>
  }




  export type ProdukMasukGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdukMasukWhereInput
    orderBy?: ProdukMasukOrderByWithAggregationInput | ProdukMasukOrderByWithAggregationInput[]
    by: ProdukMasukScalarFieldEnum[] | ProdukMasukScalarFieldEnum
    having?: ProdukMasukScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdukMasukCountAggregateInputType | true
    _avg?: ProdukMasukAvgAggregateInputType
    _sum?: ProdukMasukSumAggregateInputType
    _min?: ProdukMasukMinAggregateInputType
    _max?: ProdukMasukMaxAggregateInputType
  }

  export type ProdukMasukGroupByOutputType = {
    id: number
    produkId: number
    userId: number
    jumlah: number
    hargaModal: number
    tanggalMasuk: Date
    tanggalExp: Date | null
    _count: ProdukMasukCountAggregateOutputType | null
    _avg: ProdukMasukAvgAggregateOutputType | null
    _sum: ProdukMasukSumAggregateOutputType | null
    _min: ProdukMasukMinAggregateOutputType | null
    _max: ProdukMasukMaxAggregateOutputType | null
  }

  type GetProdukMasukGroupByPayload<T extends ProdukMasukGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdukMasukGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdukMasukGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdukMasukGroupByOutputType[P]>
            : GetScalarType<T[P], ProdukMasukGroupByOutputType[P]>
        }
      >
    >


  export type ProdukMasukSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    produkId?: boolean
    userId?: boolean
    jumlah?: boolean
    hargaModal?: boolean
    tanggalMasuk?: boolean
    tanggalExp?: boolean
    produk?: boolean | ProdukDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produkMasuk"]>



  export type ProdukMasukSelectScalar = {
    id?: boolean
    produkId?: boolean
    userId?: boolean
    jumlah?: boolean
    hargaModal?: boolean
    tanggalMasuk?: boolean
    tanggalExp?: boolean
  }

  export type ProdukMasukOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "produkId" | "userId" | "jumlah" | "hargaModal" | "tanggalMasuk" | "tanggalExp", ExtArgs["result"]["produkMasuk"]>
  export type ProdukMasukInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produk?: boolean | ProdukDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProdukMasukPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProdukMasuk"
    objects: {
      produk: Prisma.$ProdukPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      produkId: number
      userId: number
      jumlah: number
      hargaModal: number
      tanggalMasuk: Date
      tanggalExp: Date | null
    }, ExtArgs["result"]["produkMasuk"]>
    composites: {}
  }

  type ProdukMasukGetPayload<S extends boolean | null | undefined | ProdukMasukDefaultArgs> = $Result.GetResult<Prisma.$ProdukMasukPayload, S>

  type ProdukMasukCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProdukMasukFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProdukMasukCountAggregateInputType | true
    }

  export interface ProdukMasukDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProdukMasuk'], meta: { name: 'ProdukMasuk' } }
    /**
     * Find zero or one ProdukMasuk that matches the filter.
     * @param {ProdukMasukFindUniqueArgs} args - Arguments to find a ProdukMasuk
     * @example
     * // Get one ProdukMasuk
     * const produkMasuk = await prisma.produkMasuk.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdukMasukFindUniqueArgs>(args: SelectSubset<T, ProdukMasukFindUniqueArgs<ExtArgs>>): Prisma__ProdukMasukClient<$Result.GetResult<Prisma.$ProdukMasukPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProdukMasuk that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProdukMasukFindUniqueOrThrowArgs} args - Arguments to find a ProdukMasuk
     * @example
     * // Get one ProdukMasuk
     * const produkMasuk = await prisma.produkMasuk.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdukMasukFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdukMasukFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdukMasukClient<$Result.GetResult<Prisma.$ProdukMasukPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProdukMasuk that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukMasukFindFirstArgs} args - Arguments to find a ProdukMasuk
     * @example
     * // Get one ProdukMasuk
     * const produkMasuk = await prisma.produkMasuk.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdukMasukFindFirstArgs>(args?: SelectSubset<T, ProdukMasukFindFirstArgs<ExtArgs>>): Prisma__ProdukMasukClient<$Result.GetResult<Prisma.$ProdukMasukPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProdukMasuk that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukMasukFindFirstOrThrowArgs} args - Arguments to find a ProdukMasuk
     * @example
     * // Get one ProdukMasuk
     * const produkMasuk = await prisma.produkMasuk.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdukMasukFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdukMasukFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdukMasukClient<$Result.GetResult<Prisma.$ProdukMasukPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProdukMasuks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukMasukFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProdukMasuks
     * const produkMasuks = await prisma.produkMasuk.findMany()
     * 
     * // Get first 10 ProdukMasuks
     * const produkMasuks = await prisma.produkMasuk.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produkMasukWithIdOnly = await prisma.produkMasuk.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdukMasukFindManyArgs>(args?: SelectSubset<T, ProdukMasukFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdukMasukPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProdukMasuk.
     * @param {ProdukMasukCreateArgs} args - Arguments to create a ProdukMasuk.
     * @example
     * // Create one ProdukMasuk
     * const ProdukMasuk = await prisma.produkMasuk.create({
     *   data: {
     *     // ... data to create a ProdukMasuk
     *   }
     * })
     * 
     */
    create<T extends ProdukMasukCreateArgs>(args: SelectSubset<T, ProdukMasukCreateArgs<ExtArgs>>): Prisma__ProdukMasukClient<$Result.GetResult<Prisma.$ProdukMasukPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProdukMasuks.
     * @param {ProdukMasukCreateManyArgs} args - Arguments to create many ProdukMasuks.
     * @example
     * // Create many ProdukMasuks
     * const produkMasuk = await prisma.produkMasuk.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdukMasukCreateManyArgs>(args?: SelectSubset<T, ProdukMasukCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProdukMasuk.
     * @param {ProdukMasukDeleteArgs} args - Arguments to delete one ProdukMasuk.
     * @example
     * // Delete one ProdukMasuk
     * const ProdukMasuk = await prisma.produkMasuk.delete({
     *   where: {
     *     // ... filter to delete one ProdukMasuk
     *   }
     * })
     * 
     */
    delete<T extends ProdukMasukDeleteArgs>(args: SelectSubset<T, ProdukMasukDeleteArgs<ExtArgs>>): Prisma__ProdukMasukClient<$Result.GetResult<Prisma.$ProdukMasukPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProdukMasuk.
     * @param {ProdukMasukUpdateArgs} args - Arguments to update one ProdukMasuk.
     * @example
     * // Update one ProdukMasuk
     * const produkMasuk = await prisma.produkMasuk.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdukMasukUpdateArgs>(args: SelectSubset<T, ProdukMasukUpdateArgs<ExtArgs>>): Prisma__ProdukMasukClient<$Result.GetResult<Prisma.$ProdukMasukPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProdukMasuks.
     * @param {ProdukMasukDeleteManyArgs} args - Arguments to filter ProdukMasuks to delete.
     * @example
     * // Delete a few ProdukMasuks
     * const { count } = await prisma.produkMasuk.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdukMasukDeleteManyArgs>(args?: SelectSubset<T, ProdukMasukDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProdukMasuks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukMasukUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProdukMasuks
     * const produkMasuk = await prisma.produkMasuk.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdukMasukUpdateManyArgs>(args: SelectSubset<T, ProdukMasukUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProdukMasuk.
     * @param {ProdukMasukUpsertArgs} args - Arguments to update or create a ProdukMasuk.
     * @example
     * // Update or create a ProdukMasuk
     * const produkMasuk = await prisma.produkMasuk.upsert({
     *   create: {
     *     // ... data to create a ProdukMasuk
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProdukMasuk we want to update
     *   }
     * })
     */
    upsert<T extends ProdukMasukUpsertArgs>(args: SelectSubset<T, ProdukMasukUpsertArgs<ExtArgs>>): Prisma__ProdukMasukClient<$Result.GetResult<Prisma.$ProdukMasukPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProdukMasuks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukMasukCountArgs} args - Arguments to filter ProdukMasuks to count.
     * @example
     * // Count the number of ProdukMasuks
     * const count = await prisma.produkMasuk.count({
     *   where: {
     *     // ... the filter for the ProdukMasuks we want to count
     *   }
     * })
    **/
    count<T extends ProdukMasukCountArgs>(
      args?: Subset<T, ProdukMasukCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdukMasukCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProdukMasuk.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukMasukAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdukMasukAggregateArgs>(args: Subset<T, ProdukMasukAggregateArgs>): Prisma.PrismaPromise<GetProdukMasukAggregateType<T>>

    /**
     * Group by ProdukMasuk.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukMasukGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdukMasukGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdukMasukGroupByArgs['orderBy'] }
        : { orderBy?: ProdukMasukGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdukMasukGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdukMasukGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProdukMasuk model
   */
  readonly fields: ProdukMasukFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProdukMasuk.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdukMasukClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    produk<T extends ProdukDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProdukDefaultArgs<ExtArgs>>): Prisma__ProdukClient<$Result.GetResult<Prisma.$ProdukPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProdukMasuk model
   */
  interface ProdukMasukFieldRefs {
    readonly id: FieldRef<"ProdukMasuk", 'Int'>
    readonly produkId: FieldRef<"ProdukMasuk", 'Int'>
    readonly userId: FieldRef<"ProdukMasuk", 'Int'>
    readonly jumlah: FieldRef<"ProdukMasuk", 'Int'>
    readonly hargaModal: FieldRef<"ProdukMasuk", 'Float'>
    readonly tanggalMasuk: FieldRef<"ProdukMasuk", 'DateTime'>
    readonly tanggalExp: FieldRef<"ProdukMasuk", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProdukMasuk findUnique
   */
  export type ProdukMasukFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukMasuk
     */
    select?: ProdukMasukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukMasuk
     */
    omit?: ProdukMasukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukMasukInclude<ExtArgs> | null
    /**
     * Filter, which ProdukMasuk to fetch.
     */
    where: ProdukMasukWhereUniqueInput
  }

  /**
   * ProdukMasuk findUniqueOrThrow
   */
  export type ProdukMasukFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukMasuk
     */
    select?: ProdukMasukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukMasuk
     */
    omit?: ProdukMasukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukMasukInclude<ExtArgs> | null
    /**
     * Filter, which ProdukMasuk to fetch.
     */
    where: ProdukMasukWhereUniqueInput
  }

  /**
   * ProdukMasuk findFirst
   */
  export type ProdukMasukFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukMasuk
     */
    select?: ProdukMasukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukMasuk
     */
    omit?: ProdukMasukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukMasukInclude<ExtArgs> | null
    /**
     * Filter, which ProdukMasuk to fetch.
     */
    where?: ProdukMasukWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdukMasuks to fetch.
     */
    orderBy?: ProdukMasukOrderByWithRelationInput | ProdukMasukOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdukMasuks.
     */
    cursor?: ProdukMasukWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdukMasuks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdukMasuks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdukMasuks.
     */
    distinct?: ProdukMasukScalarFieldEnum | ProdukMasukScalarFieldEnum[]
  }

  /**
   * ProdukMasuk findFirstOrThrow
   */
  export type ProdukMasukFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukMasuk
     */
    select?: ProdukMasukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukMasuk
     */
    omit?: ProdukMasukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukMasukInclude<ExtArgs> | null
    /**
     * Filter, which ProdukMasuk to fetch.
     */
    where?: ProdukMasukWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdukMasuks to fetch.
     */
    orderBy?: ProdukMasukOrderByWithRelationInput | ProdukMasukOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdukMasuks.
     */
    cursor?: ProdukMasukWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdukMasuks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdukMasuks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdukMasuks.
     */
    distinct?: ProdukMasukScalarFieldEnum | ProdukMasukScalarFieldEnum[]
  }

  /**
   * ProdukMasuk findMany
   */
  export type ProdukMasukFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukMasuk
     */
    select?: ProdukMasukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukMasuk
     */
    omit?: ProdukMasukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukMasukInclude<ExtArgs> | null
    /**
     * Filter, which ProdukMasuks to fetch.
     */
    where?: ProdukMasukWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdukMasuks to fetch.
     */
    orderBy?: ProdukMasukOrderByWithRelationInput | ProdukMasukOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProdukMasuks.
     */
    cursor?: ProdukMasukWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdukMasuks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdukMasuks.
     */
    skip?: number
    distinct?: ProdukMasukScalarFieldEnum | ProdukMasukScalarFieldEnum[]
  }

  /**
   * ProdukMasuk create
   */
  export type ProdukMasukCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukMasuk
     */
    select?: ProdukMasukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukMasuk
     */
    omit?: ProdukMasukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukMasukInclude<ExtArgs> | null
    /**
     * The data needed to create a ProdukMasuk.
     */
    data: XOR<ProdukMasukCreateInput, ProdukMasukUncheckedCreateInput>
  }

  /**
   * ProdukMasuk createMany
   */
  export type ProdukMasukCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProdukMasuks.
     */
    data: ProdukMasukCreateManyInput | ProdukMasukCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProdukMasuk update
   */
  export type ProdukMasukUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukMasuk
     */
    select?: ProdukMasukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukMasuk
     */
    omit?: ProdukMasukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukMasukInclude<ExtArgs> | null
    /**
     * The data needed to update a ProdukMasuk.
     */
    data: XOR<ProdukMasukUpdateInput, ProdukMasukUncheckedUpdateInput>
    /**
     * Choose, which ProdukMasuk to update.
     */
    where: ProdukMasukWhereUniqueInput
  }

  /**
   * ProdukMasuk updateMany
   */
  export type ProdukMasukUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProdukMasuks.
     */
    data: XOR<ProdukMasukUpdateManyMutationInput, ProdukMasukUncheckedUpdateManyInput>
    /**
     * Filter which ProdukMasuks to update
     */
    where?: ProdukMasukWhereInput
    /**
     * Limit how many ProdukMasuks to update.
     */
    limit?: number
  }

  /**
   * ProdukMasuk upsert
   */
  export type ProdukMasukUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukMasuk
     */
    select?: ProdukMasukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukMasuk
     */
    omit?: ProdukMasukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukMasukInclude<ExtArgs> | null
    /**
     * The filter to search for the ProdukMasuk to update in case it exists.
     */
    where: ProdukMasukWhereUniqueInput
    /**
     * In case the ProdukMasuk found by the `where` argument doesn't exist, create a new ProdukMasuk with this data.
     */
    create: XOR<ProdukMasukCreateInput, ProdukMasukUncheckedCreateInput>
    /**
     * In case the ProdukMasuk was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdukMasukUpdateInput, ProdukMasukUncheckedUpdateInput>
  }

  /**
   * ProdukMasuk delete
   */
  export type ProdukMasukDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukMasuk
     */
    select?: ProdukMasukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukMasuk
     */
    omit?: ProdukMasukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukMasukInclude<ExtArgs> | null
    /**
     * Filter which ProdukMasuk to delete.
     */
    where: ProdukMasukWhereUniqueInput
  }

  /**
   * ProdukMasuk deleteMany
   */
  export type ProdukMasukDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdukMasuks to delete
     */
    where?: ProdukMasukWhereInput
    /**
     * Limit how many ProdukMasuks to delete.
     */
    limit?: number
  }

  /**
   * ProdukMasuk without action
   */
  export type ProdukMasukDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukMasuk
     */
    select?: ProdukMasukSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukMasuk
     */
    omit?: ProdukMasukOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukMasukInclude<ExtArgs> | null
  }


  /**
   * Model ProdukKeluar
   */

  export type AggregateProdukKeluar = {
    _count: ProdukKeluarCountAggregateOutputType | null
    _avg: ProdukKeluarAvgAggregateOutputType | null
    _sum: ProdukKeluarSumAggregateOutputType | null
    _min: ProdukKeluarMinAggregateOutputType | null
    _max: ProdukKeluarMaxAggregateOutputType | null
  }

  export type ProdukKeluarAvgAggregateOutputType = {
    id: number | null
    produkId: number | null
    userId: number | null
    jumlah: number | null
    hargaModal: number | null
    hargaJual: number | null
    keuntungan: number | null
  }

  export type ProdukKeluarSumAggregateOutputType = {
    id: number | null
    produkId: number | null
    userId: number | null
    jumlah: number | null
    hargaModal: number | null
    hargaJual: number | null
    keuntungan: number | null
  }

  export type ProdukKeluarMinAggregateOutputType = {
    id: number | null
    produkId: number | null
    userId: number | null
    jumlah: number | null
    hargaModal: number | null
    hargaJual: number | null
    keuntungan: number | null
    status: $Enums.StatusKeluar | null
    tanggalKeluar: Date | null
  }

  export type ProdukKeluarMaxAggregateOutputType = {
    id: number | null
    produkId: number | null
    userId: number | null
    jumlah: number | null
    hargaModal: number | null
    hargaJual: number | null
    keuntungan: number | null
    status: $Enums.StatusKeluar | null
    tanggalKeluar: Date | null
  }

  export type ProdukKeluarCountAggregateOutputType = {
    id: number
    produkId: number
    userId: number
    jumlah: number
    hargaModal: number
    hargaJual: number
    keuntungan: number
    status: number
    tanggalKeluar: number
    _all: number
  }


  export type ProdukKeluarAvgAggregateInputType = {
    id?: true
    produkId?: true
    userId?: true
    jumlah?: true
    hargaModal?: true
    hargaJual?: true
    keuntungan?: true
  }

  export type ProdukKeluarSumAggregateInputType = {
    id?: true
    produkId?: true
    userId?: true
    jumlah?: true
    hargaModal?: true
    hargaJual?: true
    keuntungan?: true
  }

  export type ProdukKeluarMinAggregateInputType = {
    id?: true
    produkId?: true
    userId?: true
    jumlah?: true
    hargaModal?: true
    hargaJual?: true
    keuntungan?: true
    status?: true
    tanggalKeluar?: true
  }

  export type ProdukKeluarMaxAggregateInputType = {
    id?: true
    produkId?: true
    userId?: true
    jumlah?: true
    hargaModal?: true
    hargaJual?: true
    keuntungan?: true
    status?: true
    tanggalKeluar?: true
  }

  export type ProdukKeluarCountAggregateInputType = {
    id?: true
    produkId?: true
    userId?: true
    jumlah?: true
    hargaModal?: true
    hargaJual?: true
    keuntungan?: true
    status?: true
    tanggalKeluar?: true
    _all?: true
  }

  export type ProdukKeluarAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdukKeluar to aggregate.
     */
    where?: ProdukKeluarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdukKeluars to fetch.
     */
    orderBy?: ProdukKeluarOrderByWithRelationInput | ProdukKeluarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdukKeluarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdukKeluars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdukKeluars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProdukKeluars
    **/
    _count?: true | ProdukKeluarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdukKeluarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdukKeluarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdukKeluarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdukKeluarMaxAggregateInputType
  }

  export type GetProdukKeluarAggregateType<T extends ProdukKeluarAggregateArgs> = {
        [P in keyof T & keyof AggregateProdukKeluar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdukKeluar[P]>
      : GetScalarType<T[P], AggregateProdukKeluar[P]>
  }




  export type ProdukKeluarGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdukKeluarWhereInput
    orderBy?: ProdukKeluarOrderByWithAggregationInput | ProdukKeluarOrderByWithAggregationInput[]
    by: ProdukKeluarScalarFieldEnum[] | ProdukKeluarScalarFieldEnum
    having?: ProdukKeluarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdukKeluarCountAggregateInputType | true
    _avg?: ProdukKeluarAvgAggregateInputType
    _sum?: ProdukKeluarSumAggregateInputType
    _min?: ProdukKeluarMinAggregateInputType
    _max?: ProdukKeluarMaxAggregateInputType
  }

  export type ProdukKeluarGroupByOutputType = {
    id: number
    produkId: number
    userId: number
    jumlah: number
    hargaModal: number
    hargaJual: number
    keuntungan: number
    status: $Enums.StatusKeluar
    tanggalKeluar: Date
    _count: ProdukKeluarCountAggregateOutputType | null
    _avg: ProdukKeluarAvgAggregateOutputType | null
    _sum: ProdukKeluarSumAggregateOutputType | null
    _min: ProdukKeluarMinAggregateOutputType | null
    _max: ProdukKeluarMaxAggregateOutputType | null
  }

  type GetProdukKeluarGroupByPayload<T extends ProdukKeluarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdukKeluarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdukKeluarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdukKeluarGroupByOutputType[P]>
            : GetScalarType<T[P], ProdukKeluarGroupByOutputType[P]>
        }
      >
    >


  export type ProdukKeluarSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    produkId?: boolean
    userId?: boolean
    jumlah?: boolean
    hargaModal?: boolean
    hargaJual?: boolean
    keuntungan?: boolean
    status?: boolean
    tanggalKeluar?: boolean
    produk?: boolean | ProdukDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produkKeluar"]>



  export type ProdukKeluarSelectScalar = {
    id?: boolean
    produkId?: boolean
    userId?: boolean
    jumlah?: boolean
    hargaModal?: boolean
    hargaJual?: boolean
    keuntungan?: boolean
    status?: boolean
    tanggalKeluar?: boolean
  }

  export type ProdukKeluarOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "produkId" | "userId" | "jumlah" | "hargaModal" | "hargaJual" | "keuntungan" | "status" | "tanggalKeluar", ExtArgs["result"]["produkKeluar"]>
  export type ProdukKeluarInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produk?: boolean | ProdukDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProdukKeluarPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProdukKeluar"
    objects: {
      produk: Prisma.$ProdukPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      produkId: number
      userId: number
      jumlah: number
      hargaModal: number
      hargaJual: number
      keuntungan: number
      status: $Enums.StatusKeluar
      tanggalKeluar: Date
    }, ExtArgs["result"]["produkKeluar"]>
    composites: {}
  }

  type ProdukKeluarGetPayload<S extends boolean | null | undefined | ProdukKeluarDefaultArgs> = $Result.GetResult<Prisma.$ProdukKeluarPayload, S>

  type ProdukKeluarCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProdukKeluarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProdukKeluarCountAggregateInputType | true
    }

  export interface ProdukKeluarDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProdukKeluar'], meta: { name: 'ProdukKeluar' } }
    /**
     * Find zero or one ProdukKeluar that matches the filter.
     * @param {ProdukKeluarFindUniqueArgs} args - Arguments to find a ProdukKeluar
     * @example
     * // Get one ProdukKeluar
     * const produkKeluar = await prisma.produkKeluar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdukKeluarFindUniqueArgs>(args: SelectSubset<T, ProdukKeluarFindUniqueArgs<ExtArgs>>): Prisma__ProdukKeluarClient<$Result.GetResult<Prisma.$ProdukKeluarPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProdukKeluar that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProdukKeluarFindUniqueOrThrowArgs} args - Arguments to find a ProdukKeluar
     * @example
     * // Get one ProdukKeluar
     * const produkKeluar = await prisma.produkKeluar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdukKeluarFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdukKeluarFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdukKeluarClient<$Result.GetResult<Prisma.$ProdukKeluarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProdukKeluar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukKeluarFindFirstArgs} args - Arguments to find a ProdukKeluar
     * @example
     * // Get one ProdukKeluar
     * const produkKeluar = await prisma.produkKeluar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdukKeluarFindFirstArgs>(args?: SelectSubset<T, ProdukKeluarFindFirstArgs<ExtArgs>>): Prisma__ProdukKeluarClient<$Result.GetResult<Prisma.$ProdukKeluarPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProdukKeluar that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukKeluarFindFirstOrThrowArgs} args - Arguments to find a ProdukKeluar
     * @example
     * // Get one ProdukKeluar
     * const produkKeluar = await prisma.produkKeluar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdukKeluarFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdukKeluarFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdukKeluarClient<$Result.GetResult<Prisma.$ProdukKeluarPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProdukKeluars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukKeluarFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProdukKeluars
     * const produkKeluars = await prisma.produkKeluar.findMany()
     * 
     * // Get first 10 ProdukKeluars
     * const produkKeluars = await prisma.produkKeluar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produkKeluarWithIdOnly = await prisma.produkKeluar.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdukKeluarFindManyArgs>(args?: SelectSubset<T, ProdukKeluarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdukKeluarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProdukKeluar.
     * @param {ProdukKeluarCreateArgs} args - Arguments to create a ProdukKeluar.
     * @example
     * // Create one ProdukKeluar
     * const ProdukKeluar = await prisma.produkKeluar.create({
     *   data: {
     *     // ... data to create a ProdukKeluar
     *   }
     * })
     * 
     */
    create<T extends ProdukKeluarCreateArgs>(args: SelectSubset<T, ProdukKeluarCreateArgs<ExtArgs>>): Prisma__ProdukKeluarClient<$Result.GetResult<Prisma.$ProdukKeluarPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProdukKeluars.
     * @param {ProdukKeluarCreateManyArgs} args - Arguments to create many ProdukKeluars.
     * @example
     * // Create many ProdukKeluars
     * const produkKeluar = await prisma.produkKeluar.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdukKeluarCreateManyArgs>(args?: SelectSubset<T, ProdukKeluarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProdukKeluar.
     * @param {ProdukKeluarDeleteArgs} args - Arguments to delete one ProdukKeluar.
     * @example
     * // Delete one ProdukKeluar
     * const ProdukKeluar = await prisma.produkKeluar.delete({
     *   where: {
     *     // ... filter to delete one ProdukKeluar
     *   }
     * })
     * 
     */
    delete<T extends ProdukKeluarDeleteArgs>(args: SelectSubset<T, ProdukKeluarDeleteArgs<ExtArgs>>): Prisma__ProdukKeluarClient<$Result.GetResult<Prisma.$ProdukKeluarPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProdukKeluar.
     * @param {ProdukKeluarUpdateArgs} args - Arguments to update one ProdukKeluar.
     * @example
     * // Update one ProdukKeluar
     * const produkKeluar = await prisma.produkKeluar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdukKeluarUpdateArgs>(args: SelectSubset<T, ProdukKeluarUpdateArgs<ExtArgs>>): Prisma__ProdukKeluarClient<$Result.GetResult<Prisma.$ProdukKeluarPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProdukKeluars.
     * @param {ProdukKeluarDeleteManyArgs} args - Arguments to filter ProdukKeluars to delete.
     * @example
     * // Delete a few ProdukKeluars
     * const { count } = await prisma.produkKeluar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdukKeluarDeleteManyArgs>(args?: SelectSubset<T, ProdukKeluarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProdukKeluars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukKeluarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProdukKeluars
     * const produkKeluar = await prisma.produkKeluar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdukKeluarUpdateManyArgs>(args: SelectSubset<T, ProdukKeluarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProdukKeluar.
     * @param {ProdukKeluarUpsertArgs} args - Arguments to update or create a ProdukKeluar.
     * @example
     * // Update or create a ProdukKeluar
     * const produkKeluar = await prisma.produkKeluar.upsert({
     *   create: {
     *     // ... data to create a ProdukKeluar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProdukKeluar we want to update
     *   }
     * })
     */
    upsert<T extends ProdukKeluarUpsertArgs>(args: SelectSubset<T, ProdukKeluarUpsertArgs<ExtArgs>>): Prisma__ProdukKeluarClient<$Result.GetResult<Prisma.$ProdukKeluarPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProdukKeluars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukKeluarCountArgs} args - Arguments to filter ProdukKeluars to count.
     * @example
     * // Count the number of ProdukKeluars
     * const count = await prisma.produkKeluar.count({
     *   where: {
     *     // ... the filter for the ProdukKeluars we want to count
     *   }
     * })
    **/
    count<T extends ProdukKeluarCountArgs>(
      args?: Subset<T, ProdukKeluarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdukKeluarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProdukKeluar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukKeluarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdukKeluarAggregateArgs>(args: Subset<T, ProdukKeluarAggregateArgs>): Prisma.PrismaPromise<GetProdukKeluarAggregateType<T>>

    /**
     * Group by ProdukKeluar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdukKeluarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdukKeluarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdukKeluarGroupByArgs['orderBy'] }
        : { orderBy?: ProdukKeluarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdukKeluarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdukKeluarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProdukKeluar model
   */
  readonly fields: ProdukKeluarFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProdukKeluar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdukKeluarClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    produk<T extends ProdukDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProdukDefaultArgs<ExtArgs>>): Prisma__ProdukClient<$Result.GetResult<Prisma.$ProdukPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProdukKeluar model
   */
  interface ProdukKeluarFieldRefs {
    readonly id: FieldRef<"ProdukKeluar", 'Int'>
    readonly produkId: FieldRef<"ProdukKeluar", 'Int'>
    readonly userId: FieldRef<"ProdukKeluar", 'Int'>
    readonly jumlah: FieldRef<"ProdukKeluar", 'Int'>
    readonly hargaModal: FieldRef<"ProdukKeluar", 'Float'>
    readonly hargaJual: FieldRef<"ProdukKeluar", 'Float'>
    readonly keuntungan: FieldRef<"ProdukKeluar", 'Float'>
    readonly status: FieldRef<"ProdukKeluar", 'StatusKeluar'>
    readonly tanggalKeluar: FieldRef<"ProdukKeluar", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProdukKeluar findUnique
   */
  export type ProdukKeluarFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukKeluar
     */
    select?: ProdukKeluarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukKeluar
     */
    omit?: ProdukKeluarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukKeluarInclude<ExtArgs> | null
    /**
     * Filter, which ProdukKeluar to fetch.
     */
    where: ProdukKeluarWhereUniqueInput
  }

  /**
   * ProdukKeluar findUniqueOrThrow
   */
  export type ProdukKeluarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukKeluar
     */
    select?: ProdukKeluarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukKeluar
     */
    omit?: ProdukKeluarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukKeluarInclude<ExtArgs> | null
    /**
     * Filter, which ProdukKeluar to fetch.
     */
    where: ProdukKeluarWhereUniqueInput
  }

  /**
   * ProdukKeluar findFirst
   */
  export type ProdukKeluarFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukKeluar
     */
    select?: ProdukKeluarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukKeluar
     */
    omit?: ProdukKeluarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukKeluarInclude<ExtArgs> | null
    /**
     * Filter, which ProdukKeluar to fetch.
     */
    where?: ProdukKeluarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdukKeluars to fetch.
     */
    orderBy?: ProdukKeluarOrderByWithRelationInput | ProdukKeluarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdukKeluars.
     */
    cursor?: ProdukKeluarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdukKeluars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdukKeluars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdukKeluars.
     */
    distinct?: ProdukKeluarScalarFieldEnum | ProdukKeluarScalarFieldEnum[]
  }

  /**
   * ProdukKeluar findFirstOrThrow
   */
  export type ProdukKeluarFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukKeluar
     */
    select?: ProdukKeluarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukKeluar
     */
    omit?: ProdukKeluarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukKeluarInclude<ExtArgs> | null
    /**
     * Filter, which ProdukKeluar to fetch.
     */
    where?: ProdukKeluarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdukKeluars to fetch.
     */
    orderBy?: ProdukKeluarOrderByWithRelationInput | ProdukKeluarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdukKeluars.
     */
    cursor?: ProdukKeluarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdukKeluars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdukKeluars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdukKeluars.
     */
    distinct?: ProdukKeluarScalarFieldEnum | ProdukKeluarScalarFieldEnum[]
  }

  /**
   * ProdukKeluar findMany
   */
  export type ProdukKeluarFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukKeluar
     */
    select?: ProdukKeluarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukKeluar
     */
    omit?: ProdukKeluarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukKeluarInclude<ExtArgs> | null
    /**
     * Filter, which ProdukKeluars to fetch.
     */
    where?: ProdukKeluarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdukKeluars to fetch.
     */
    orderBy?: ProdukKeluarOrderByWithRelationInput | ProdukKeluarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProdukKeluars.
     */
    cursor?: ProdukKeluarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdukKeluars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdukKeluars.
     */
    skip?: number
    distinct?: ProdukKeluarScalarFieldEnum | ProdukKeluarScalarFieldEnum[]
  }

  /**
   * ProdukKeluar create
   */
  export type ProdukKeluarCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukKeluar
     */
    select?: ProdukKeluarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukKeluar
     */
    omit?: ProdukKeluarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukKeluarInclude<ExtArgs> | null
    /**
     * The data needed to create a ProdukKeluar.
     */
    data: XOR<ProdukKeluarCreateInput, ProdukKeluarUncheckedCreateInput>
  }

  /**
   * ProdukKeluar createMany
   */
  export type ProdukKeluarCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProdukKeluars.
     */
    data: ProdukKeluarCreateManyInput | ProdukKeluarCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProdukKeluar update
   */
  export type ProdukKeluarUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukKeluar
     */
    select?: ProdukKeluarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukKeluar
     */
    omit?: ProdukKeluarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukKeluarInclude<ExtArgs> | null
    /**
     * The data needed to update a ProdukKeluar.
     */
    data: XOR<ProdukKeluarUpdateInput, ProdukKeluarUncheckedUpdateInput>
    /**
     * Choose, which ProdukKeluar to update.
     */
    where: ProdukKeluarWhereUniqueInput
  }

  /**
   * ProdukKeluar updateMany
   */
  export type ProdukKeluarUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProdukKeluars.
     */
    data: XOR<ProdukKeluarUpdateManyMutationInput, ProdukKeluarUncheckedUpdateManyInput>
    /**
     * Filter which ProdukKeluars to update
     */
    where?: ProdukKeluarWhereInput
    /**
     * Limit how many ProdukKeluars to update.
     */
    limit?: number
  }

  /**
   * ProdukKeluar upsert
   */
  export type ProdukKeluarUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukKeluar
     */
    select?: ProdukKeluarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukKeluar
     */
    omit?: ProdukKeluarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukKeluarInclude<ExtArgs> | null
    /**
     * The filter to search for the ProdukKeluar to update in case it exists.
     */
    where: ProdukKeluarWhereUniqueInput
    /**
     * In case the ProdukKeluar found by the `where` argument doesn't exist, create a new ProdukKeluar with this data.
     */
    create: XOR<ProdukKeluarCreateInput, ProdukKeluarUncheckedCreateInput>
    /**
     * In case the ProdukKeluar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdukKeluarUpdateInput, ProdukKeluarUncheckedUpdateInput>
  }

  /**
   * ProdukKeluar delete
   */
  export type ProdukKeluarDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukKeluar
     */
    select?: ProdukKeluarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukKeluar
     */
    omit?: ProdukKeluarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukKeluarInclude<ExtArgs> | null
    /**
     * Filter which ProdukKeluar to delete.
     */
    where: ProdukKeluarWhereUniqueInput
  }

  /**
   * ProdukKeluar deleteMany
   */
  export type ProdukKeluarDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdukKeluars to delete
     */
    where?: ProdukKeluarWhereInput
    /**
     * Limit how many ProdukKeluars to delete.
     */
    limit?: number
  }

  /**
   * ProdukKeluar without action
   */
  export type ProdukKeluarDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdukKeluar
     */
    select?: ProdukKeluarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProdukKeluar
     */
    omit?: ProdukKeluarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdukKeluarInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProdukScalarFieldEnum: {
    id: 'id',
    nama: 'nama',
    merk: 'merk',
    kodeProduk: 'kodeProduk',
    kategori: 'kategori',
    hargaModal: 'hargaModal',
    hargaJual: 'hargaJual',
    stok: 'stok',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProdukScalarFieldEnum = (typeof ProdukScalarFieldEnum)[keyof typeof ProdukScalarFieldEnum]


  export const ProdukStokKadaluarsaScalarFieldEnum: {
    id: 'id',
    produkId: 'produkId',
    stokAwal: 'stokAwal',
    sisaStok: 'sisaStok',
    tanggalExp: 'tanggalExp'
  };

  export type ProdukStokKadaluarsaScalarFieldEnum = (typeof ProdukStokKadaluarsaScalarFieldEnum)[keyof typeof ProdukStokKadaluarsaScalarFieldEnum]


  export const ProdukMasukScalarFieldEnum: {
    id: 'id',
    produkId: 'produkId',
    userId: 'userId',
    jumlah: 'jumlah',
    hargaModal: 'hargaModal',
    tanggalMasuk: 'tanggalMasuk',
    tanggalExp: 'tanggalExp'
  };

  export type ProdukMasukScalarFieldEnum = (typeof ProdukMasukScalarFieldEnum)[keyof typeof ProdukMasukScalarFieldEnum]


  export const ProdukKeluarScalarFieldEnum: {
    id: 'id',
    produkId: 'produkId',
    userId: 'userId',
    jumlah: 'jumlah',
    hargaModal: 'hargaModal',
    hargaJual: 'hargaJual',
    keuntungan: 'keuntungan',
    status: 'status',
    tanggalKeluar: 'tanggalKeluar'
  };

  export type ProdukKeluarScalarFieldEnum = (typeof ProdukKeluarScalarFieldEnum)[keyof typeof ProdukKeluarScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const UserOrderByRelevanceFieldEnum: {
    name: 'name',
    email: 'email',
    password: 'password'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const ProdukOrderByRelevanceFieldEnum: {
    nama: 'nama',
    merk: 'merk',
    kodeProduk: 'kodeProduk'
  };

  export type ProdukOrderByRelevanceFieldEnum = (typeof ProdukOrderByRelevanceFieldEnum)[keyof typeof ProdukOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'KategoriProduk'
   */
  export type EnumKategoriProdukFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KategoriProduk'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'StatusKeluar'
   */
  export type EnumStatusKeluarFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusKeluar'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    produkMasuk?: ProdukMasukListRelationFilter
    produkKeluar?: ProdukKeluarListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    produkMasuk?: ProdukMasukOrderByRelationAggregateInput
    produkKeluar?: ProdukKeluarOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    produkMasuk?: ProdukMasukListRelationFilter
    produkKeluar?: ProdukKeluarListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ProdukWhereInput = {
    AND?: ProdukWhereInput | ProdukWhereInput[]
    OR?: ProdukWhereInput[]
    NOT?: ProdukWhereInput | ProdukWhereInput[]
    id?: IntFilter<"Produk"> | number
    nama?: StringFilter<"Produk"> | string
    merk?: StringFilter<"Produk"> | string
    kodeProduk?: StringFilter<"Produk"> | string
    kategori?: EnumKategoriProdukFilter<"Produk"> | $Enums.KategoriProduk
    hargaModal?: FloatFilter<"Produk"> | number
    hargaJual?: FloatFilter<"Produk"> | number
    stok?: IntFilter<"Produk"> | number
    createdAt?: DateTimeFilter<"Produk"> | Date | string
    updatedAt?: DateTimeFilter<"Produk"> | Date | string
    stokBatch?: ProdukStokKadaluarsaListRelationFilter
    produkMasuk?: ProdukMasukListRelationFilter
    produkKeluar?: ProdukKeluarListRelationFilter
  }

  export type ProdukOrderByWithRelationInput = {
    id?: SortOrder
    nama?: SortOrder
    merk?: SortOrder
    kodeProduk?: SortOrder
    kategori?: SortOrder
    hargaModal?: SortOrder
    hargaJual?: SortOrder
    stok?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    stokBatch?: ProdukStokKadaluarsaOrderByRelationAggregateInput
    produkMasuk?: ProdukMasukOrderByRelationAggregateInput
    produkKeluar?: ProdukKeluarOrderByRelationAggregateInput
    _relevance?: ProdukOrderByRelevanceInput
  }

  export type ProdukWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    kodeProduk?: string
    AND?: ProdukWhereInput | ProdukWhereInput[]
    OR?: ProdukWhereInput[]
    NOT?: ProdukWhereInput | ProdukWhereInput[]
    nama?: StringFilter<"Produk"> | string
    merk?: StringFilter<"Produk"> | string
    kategori?: EnumKategoriProdukFilter<"Produk"> | $Enums.KategoriProduk
    hargaModal?: FloatFilter<"Produk"> | number
    hargaJual?: FloatFilter<"Produk"> | number
    stok?: IntFilter<"Produk"> | number
    createdAt?: DateTimeFilter<"Produk"> | Date | string
    updatedAt?: DateTimeFilter<"Produk"> | Date | string
    stokBatch?: ProdukStokKadaluarsaListRelationFilter
    produkMasuk?: ProdukMasukListRelationFilter
    produkKeluar?: ProdukKeluarListRelationFilter
  }, "id" | "kodeProduk">

  export type ProdukOrderByWithAggregationInput = {
    id?: SortOrder
    nama?: SortOrder
    merk?: SortOrder
    kodeProduk?: SortOrder
    kategori?: SortOrder
    hargaModal?: SortOrder
    hargaJual?: SortOrder
    stok?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProdukCountOrderByAggregateInput
    _avg?: ProdukAvgOrderByAggregateInput
    _max?: ProdukMaxOrderByAggregateInput
    _min?: ProdukMinOrderByAggregateInput
    _sum?: ProdukSumOrderByAggregateInput
  }

  export type ProdukScalarWhereWithAggregatesInput = {
    AND?: ProdukScalarWhereWithAggregatesInput | ProdukScalarWhereWithAggregatesInput[]
    OR?: ProdukScalarWhereWithAggregatesInput[]
    NOT?: ProdukScalarWhereWithAggregatesInput | ProdukScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Produk"> | number
    nama?: StringWithAggregatesFilter<"Produk"> | string
    merk?: StringWithAggregatesFilter<"Produk"> | string
    kodeProduk?: StringWithAggregatesFilter<"Produk"> | string
    kategori?: EnumKategoriProdukWithAggregatesFilter<"Produk"> | $Enums.KategoriProduk
    hargaModal?: FloatWithAggregatesFilter<"Produk"> | number
    hargaJual?: FloatWithAggregatesFilter<"Produk"> | number
    stok?: IntWithAggregatesFilter<"Produk"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Produk"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Produk"> | Date | string
  }

  export type ProdukStokKadaluarsaWhereInput = {
    AND?: ProdukStokKadaluarsaWhereInput | ProdukStokKadaluarsaWhereInput[]
    OR?: ProdukStokKadaluarsaWhereInput[]
    NOT?: ProdukStokKadaluarsaWhereInput | ProdukStokKadaluarsaWhereInput[]
    id?: IntFilter<"ProdukStokKadaluarsa"> | number
    produkId?: IntFilter<"ProdukStokKadaluarsa"> | number
    stokAwal?: IntFilter<"ProdukStokKadaluarsa"> | number
    sisaStok?: IntFilter<"ProdukStokKadaluarsa"> | number
    tanggalExp?: DateTimeNullableFilter<"ProdukStokKadaluarsa"> | Date | string | null
    produk?: XOR<ProdukScalarRelationFilter, ProdukWhereInput>
  }

  export type ProdukStokKadaluarsaOrderByWithRelationInput = {
    id?: SortOrder
    produkId?: SortOrder
    stokAwal?: SortOrder
    sisaStok?: SortOrder
    tanggalExp?: SortOrderInput | SortOrder
    produk?: ProdukOrderByWithRelationInput
  }

  export type ProdukStokKadaluarsaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProdukStokKadaluarsaWhereInput | ProdukStokKadaluarsaWhereInput[]
    OR?: ProdukStokKadaluarsaWhereInput[]
    NOT?: ProdukStokKadaluarsaWhereInput | ProdukStokKadaluarsaWhereInput[]
    produkId?: IntFilter<"ProdukStokKadaluarsa"> | number
    stokAwal?: IntFilter<"ProdukStokKadaluarsa"> | number
    sisaStok?: IntFilter<"ProdukStokKadaluarsa"> | number
    tanggalExp?: DateTimeNullableFilter<"ProdukStokKadaluarsa"> | Date | string | null
    produk?: XOR<ProdukScalarRelationFilter, ProdukWhereInput>
  }, "id">

  export type ProdukStokKadaluarsaOrderByWithAggregationInput = {
    id?: SortOrder
    produkId?: SortOrder
    stokAwal?: SortOrder
    sisaStok?: SortOrder
    tanggalExp?: SortOrderInput | SortOrder
    _count?: ProdukStokKadaluarsaCountOrderByAggregateInput
    _avg?: ProdukStokKadaluarsaAvgOrderByAggregateInput
    _max?: ProdukStokKadaluarsaMaxOrderByAggregateInput
    _min?: ProdukStokKadaluarsaMinOrderByAggregateInput
    _sum?: ProdukStokKadaluarsaSumOrderByAggregateInput
  }

  export type ProdukStokKadaluarsaScalarWhereWithAggregatesInput = {
    AND?: ProdukStokKadaluarsaScalarWhereWithAggregatesInput | ProdukStokKadaluarsaScalarWhereWithAggregatesInput[]
    OR?: ProdukStokKadaluarsaScalarWhereWithAggregatesInput[]
    NOT?: ProdukStokKadaluarsaScalarWhereWithAggregatesInput | ProdukStokKadaluarsaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProdukStokKadaluarsa"> | number
    produkId?: IntWithAggregatesFilter<"ProdukStokKadaluarsa"> | number
    stokAwal?: IntWithAggregatesFilter<"ProdukStokKadaluarsa"> | number
    sisaStok?: IntWithAggregatesFilter<"ProdukStokKadaluarsa"> | number
    tanggalExp?: DateTimeNullableWithAggregatesFilter<"ProdukStokKadaluarsa"> | Date | string | null
  }

  export type ProdukMasukWhereInput = {
    AND?: ProdukMasukWhereInput | ProdukMasukWhereInput[]
    OR?: ProdukMasukWhereInput[]
    NOT?: ProdukMasukWhereInput | ProdukMasukWhereInput[]
    id?: IntFilter<"ProdukMasuk"> | number
    produkId?: IntFilter<"ProdukMasuk"> | number
    userId?: IntFilter<"ProdukMasuk"> | number
    jumlah?: IntFilter<"ProdukMasuk"> | number
    hargaModal?: FloatFilter<"ProdukMasuk"> | number
    tanggalMasuk?: DateTimeFilter<"ProdukMasuk"> | Date | string
    tanggalExp?: DateTimeNullableFilter<"ProdukMasuk"> | Date | string | null
    produk?: XOR<ProdukScalarRelationFilter, ProdukWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ProdukMasukOrderByWithRelationInput = {
    id?: SortOrder
    produkId?: SortOrder
    userId?: SortOrder
    jumlah?: SortOrder
    hargaModal?: SortOrder
    tanggalMasuk?: SortOrder
    tanggalExp?: SortOrderInput | SortOrder
    produk?: ProdukOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ProdukMasukWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProdukMasukWhereInput | ProdukMasukWhereInput[]
    OR?: ProdukMasukWhereInput[]
    NOT?: ProdukMasukWhereInput | ProdukMasukWhereInput[]
    produkId?: IntFilter<"ProdukMasuk"> | number
    userId?: IntFilter<"ProdukMasuk"> | number
    jumlah?: IntFilter<"ProdukMasuk"> | number
    hargaModal?: FloatFilter<"ProdukMasuk"> | number
    tanggalMasuk?: DateTimeFilter<"ProdukMasuk"> | Date | string
    tanggalExp?: DateTimeNullableFilter<"ProdukMasuk"> | Date | string | null
    produk?: XOR<ProdukScalarRelationFilter, ProdukWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ProdukMasukOrderByWithAggregationInput = {
    id?: SortOrder
    produkId?: SortOrder
    userId?: SortOrder
    jumlah?: SortOrder
    hargaModal?: SortOrder
    tanggalMasuk?: SortOrder
    tanggalExp?: SortOrderInput | SortOrder
    _count?: ProdukMasukCountOrderByAggregateInput
    _avg?: ProdukMasukAvgOrderByAggregateInput
    _max?: ProdukMasukMaxOrderByAggregateInput
    _min?: ProdukMasukMinOrderByAggregateInput
    _sum?: ProdukMasukSumOrderByAggregateInput
  }

  export type ProdukMasukScalarWhereWithAggregatesInput = {
    AND?: ProdukMasukScalarWhereWithAggregatesInput | ProdukMasukScalarWhereWithAggregatesInput[]
    OR?: ProdukMasukScalarWhereWithAggregatesInput[]
    NOT?: ProdukMasukScalarWhereWithAggregatesInput | ProdukMasukScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProdukMasuk"> | number
    produkId?: IntWithAggregatesFilter<"ProdukMasuk"> | number
    userId?: IntWithAggregatesFilter<"ProdukMasuk"> | number
    jumlah?: IntWithAggregatesFilter<"ProdukMasuk"> | number
    hargaModal?: FloatWithAggregatesFilter<"ProdukMasuk"> | number
    tanggalMasuk?: DateTimeWithAggregatesFilter<"ProdukMasuk"> | Date | string
    tanggalExp?: DateTimeNullableWithAggregatesFilter<"ProdukMasuk"> | Date | string | null
  }

  export type ProdukKeluarWhereInput = {
    AND?: ProdukKeluarWhereInput | ProdukKeluarWhereInput[]
    OR?: ProdukKeluarWhereInput[]
    NOT?: ProdukKeluarWhereInput | ProdukKeluarWhereInput[]
    id?: IntFilter<"ProdukKeluar"> | number
    produkId?: IntFilter<"ProdukKeluar"> | number
    userId?: IntFilter<"ProdukKeluar"> | number
    jumlah?: IntFilter<"ProdukKeluar"> | number
    hargaModal?: FloatFilter<"ProdukKeluar"> | number
    hargaJual?: FloatFilter<"ProdukKeluar"> | number
    keuntungan?: FloatFilter<"ProdukKeluar"> | number
    status?: EnumStatusKeluarFilter<"ProdukKeluar"> | $Enums.StatusKeluar
    tanggalKeluar?: DateTimeFilter<"ProdukKeluar"> | Date | string
    produk?: XOR<ProdukScalarRelationFilter, ProdukWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ProdukKeluarOrderByWithRelationInput = {
    id?: SortOrder
    produkId?: SortOrder
    userId?: SortOrder
    jumlah?: SortOrder
    hargaModal?: SortOrder
    hargaJual?: SortOrder
    keuntungan?: SortOrder
    status?: SortOrder
    tanggalKeluar?: SortOrder
    produk?: ProdukOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ProdukKeluarWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProdukKeluarWhereInput | ProdukKeluarWhereInput[]
    OR?: ProdukKeluarWhereInput[]
    NOT?: ProdukKeluarWhereInput | ProdukKeluarWhereInput[]
    produkId?: IntFilter<"ProdukKeluar"> | number
    userId?: IntFilter<"ProdukKeluar"> | number
    jumlah?: IntFilter<"ProdukKeluar"> | number
    hargaModal?: FloatFilter<"ProdukKeluar"> | number
    hargaJual?: FloatFilter<"ProdukKeluar"> | number
    keuntungan?: FloatFilter<"ProdukKeluar"> | number
    status?: EnumStatusKeluarFilter<"ProdukKeluar"> | $Enums.StatusKeluar
    tanggalKeluar?: DateTimeFilter<"ProdukKeluar"> | Date | string
    produk?: XOR<ProdukScalarRelationFilter, ProdukWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ProdukKeluarOrderByWithAggregationInput = {
    id?: SortOrder
    produkId?: SortOrder
    userId?: SortOrder
    jumlah?: SortOrder
    hargaModal?: SortOrder
    hargaJual?: SortOrder
    keuntungan?: SortOrder
    status?: SortOrder
    tanggalKeluar?: SortOrder
    _count?: ProdukKeluarCountOrderByAggregateInput
    _avg?: ProdukKeluarAvgOrderByAggregateInput
    _max?: ProdukKeluarMaxOrderByAggregateInput
    _min?: ProdukKeluarMinOrderByAggregateInput
    _sum?: ProdukKeluarSumOrderByAggregateInput
  }

  export type ProdukKeluarScalarWhereWithAggregatesInput = {
    AND?: ProdukKeluarScalarWhereWithAggregatesInput | ProdukKeluarScalarWhereWithAggregatesInput[]
    OR?: ProdukKeluarScalarWhereWithAggregatesInput[]
    NOT?: ProdukKeluarScalarWhereWithAggregatesInput | ProdukKeluarScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProdukKeluar"> | number
    produkId?: IntWithAggregatesFilter<"ProdukKeluar"> | number
    userId?: IntWithAggregatesFilter<"ProdukKeluar"> | number
    jumlah?: IntWithAggregatesFilter<"ProdukKeluar"> | number
    hargaModal?: FloatWithAggregatesFilter<"ProdukKeluar"> | number
    hargaJual?: FloatWithAggregatesFilter<"ProdukKeluar"> | number
    keuntungan?: FloatWithAggregatesFilter<"ProdukKeluar"> | number
    status?: EnumStatusKeluarWithAggregatesFilter<"ProdukKeluar"> | $Enums.StatusKeluar
    tanggalKeluar?: DateTimeWithAggregatesFilter<"ProdukKeluar"> | Date | string
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    produkMasuk?: ProdukMasukCreateNestedManyWithoutUserInput
    produkKeluar?: ProdukKeluarCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    produkMasuk?: ProdukMasukUncheckedCreateNestedManyWithoutUserInput
    produkKeluar?: ProdukKeluarUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    produkMasuk?: ProdukMasukUpdateManyWithoutUserNestedInput
    produkKeluar?: ProdukKeluarUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    produkMasuk?: ProdukMasukUncheckedUpdateManyWithoutUserNestedInput
    produkKeluar?: ProdukKeluarUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdukCreateInput = {
    nama: string
    merk: string
    kodeProduk: string
    kategori: $Enums.KategoriProduk
    hargaModal: number
    hargaJual: number
    stok?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    stokBatch?: ProdukStokKadaluarsaCreateNestedManyWithoutProdukInput
    produkMasuk?: ProdukMasukCreateNestedManyWithoutProdukInput
    produkKeluar?: ProdukKeluarCreateNestedManyWithoutProdukInput
  }

  export type ProdukUncheckedCreateInput = {
    id?: number
    nama: string
    merk: string
    kodeProduk: string
    kategori: $Enums.KategoriProduk
    hargaModal: number
    hargaJual: number
    stok?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    stokBatch?: ProdukStokKadaluarsaUncheckedCreateNestedManyWithoutProdukInput
    produkMasuk?: ProdukMasukUncheckedCreateNestedManyWithoutProdukInput
    produkKeluar?: ProdukKeluarUncheckedCreateNestedManyWithoutProdukInput
  }

  export type ProdukUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    merk?: StringFieldUpdateOperationsInput | string
    kodeProduk?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriProdukFieldUpdateOperationsInput | $Enums.KategoriProduk
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    stok?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stokBatch?: ProdukStokKadaluarsaUpdateManyWithoutProdukNestedInput
    produkMasuk?: ProdukMasukUpdateManyWithoutProdukNestedInput
    produkKeluar?: ProdukKeluarUpdateManyWithoutProdukNestedInput
  }

  export type ProdukUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    merk?: StringFieldUpdateOperationsInput | string
    kodeProduk?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriProdukFieldUpdateOperationsInput | $Enums.KategoriProduk
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    stok?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stokBatch?: ProdukStokKadaluarsaUncheckedUpdateManyWithoutProdukNestedInput
    produkMasuk?: ProdukMasukUncheckedUpdateManyWithoutProdukNestedInput
    produkKeluar?: ProdukKeluarUncheckedUpdateManyWithoutProdukNestedInput
  }

  export type ProdukCreateManyInput = {
    id?: number
    nama: string
    merk: string
    kodeProduk: string
    kategori: $Enums.KategoriProduk
    hargaModal: number
    hargaJual: number
    stok?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProdukUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
    merk?: StringFieldUpdateOperationsInput | string
    kodeProduk?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriProdukFieldUpdateOperationsInput | $Enums.KategoriProduk
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    stok?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdukUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    merk?: StringFieldUpdateOperationsInput | string
    kodeProduk?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriProdukFieldUpdateOperationsInput | $Enums.KategoriProduk
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    stok?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdukStokKadaluarsaCreateInput = {
    stokAwal: number
    sisaStok: number
    tanggalExp?: Date | string | null
    produk: ProdukCreateNestedOneWithoutStokBatchInput
  }

  export type ProdukStokKadaluarsaUncheckedCreateInput = {
    id?: number
    produkId: number
    stokAwal: number
    sisaStok: number
    tanggalExp?: Date | string | null
  }

  export type ProdukStokKadaluarsaUpdateInput = {
    stokAwal?: IntFieldUpdateOperationsInput | number
    sisaStok?: IntFieldUpdateOperationsInput | number
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    produk?: ProdukUpdateOneRequiredWithoutStokBatchNestedInput
  }

  export type ProdukStokKadaluarsaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    produkId?: IntFieldUpdateOperationsInput | number
    stokAwal?: IntFieldUpdateOperationsInput | number
    sisaStok?: IntFieldUpdateOperationsInput | number
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdukStokKadaluarsaCreateManyInput = {
    id?: number
    produkId: number
    stokAwal: number
    sisaStok: number
    tanggalExp?: Date | string | null
  }

  export type ProdukStokKadaluarsaUpdateManyMutationInput = {
    stokAwal?: IntFieldUpdateOperationsInput | number
    sisaStok?: IntFieldUpdateOperationsInput | number
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdukStokKadaluarsaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    produkId?: IntFieldUpdateOperationsInput | number
    stokAwal?: IntFieldUpdateOperationsInput | number
    sisaStok?: IntFieldUpdateOperationsInput | number
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdukMasukCreateInput = {
    jumlah: number
    hargaModal: number
    tanggalMasuk: Date | string
    tanggalExp?: Date | string | null
    produk: ProdukCreateNestedOneWithoutProdukMasukInput
    user: UserCreateNestedOneWithoutProdukMasukInput
  }

  export type ProdukMasukUncheckedCreateInput = {
    id?: number
    produkId: number
    userId: number
    jumlah: number
    hargaModal: number
    tanggalMasuk: Date | string
    tanggalExp?: Date | string | null
  }

  export type ProdukMasukUpdateInput = {
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    tanggalMasuk?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    produk?: ProdukUpdateOneRequiredWithoutProdukMasukNestedInput
    user?: UserUpdateOneRequiredWithoutProdukMasukNestedInput
  }

  export type ProdukMasukUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    produkId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    tanggalMasuk?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdukMasukCreateManyInput = {
    id?: number
    produkId: number
    userId: number
    jumlah: number
    hargaModal: number
    tanggalMasuk: Date | string
    tanggalExp?: Date | string | null
  }

  export type ProdukMasukUpdateManyMutationInput = {
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    tanggalMasuk?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdukMasukUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    produkId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    tanggalMasuk?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdukKeluarCreateInput = {
    jumlah: number
    hargaModal: number
    hargaJual: number
    keuntungan: number
    status: $Enums.StatusKeluar
    tanggalKeluar: Date | string
    produk: ProdukCreateNestedOneWithoutProdukKeluarInput
    user: UserCreateNestedOneWithoutProdukKeluarInput
  }

  export type ProdukKeluarUncheckedCreateInput = {
    id?: number
    produkId: number
    userId: number
    jumlah: number
    hargaModal: number
    hargaJual: number
    keuntungan: number
    status: $Enums.StatusKeluar
    tanggalKeluar: Date | string
  }

  export type ProdukKeluarUpdateInput = {
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    keuntungan?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusKeluarFieldUpdateOperationsInput | $Enums.StatusKeluar
    tanggalKeluar?: DateTimeFieldUpdateOperationsInput | Date | string
    produk?: ProdukUpdateOneRequiredWithoutProdukKeluarNestedInput
    user?: UserUpdateOneRequiredWithoutProdukKeluarNestedInput
  }

  export type ProdukKeluarUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    produkId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    keuntungan?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusKeluarFieldUpdateOperationsInput | $Enums.StatusKeluar
    tanggalKeluar?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdukKeluarCreateManyInput = {
    id?: number
    produkId: number
    userId: number
    jumlah: number
    hargaModal: number
    hargaJual: number
    keuntungan: number
    status: $Enums.StatusKeluar
    tanggalKeluar: Date | string
  }

  export type ProdukKeluarUpdateManyMutationInput = {
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    keuntungan?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusKeluarFieldUpdateOperationsInput | $Enums.StatusKeluar
    tanggalKeluar?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdukKeluarUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    produkId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    keuntungan?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusKeluarFieldUpdateOperationsInput | $Enums.StatusKeluar
    tanggalKeluar?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProdukMasukListRelationFilter = {
    every?: ProdukMasukWhereInput
    some?: ProdukMasukWhereInput
    none?: ProdukMasukWhereInput
  }

  export type ProdukKeluarListRelationFilter = {
    every?: ProdukKeluarWhereInput
    some?: ProdukKeluarWhereInput
    none?: ProdukKeluarWhereInput
  }

  export type ProdukMasukOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProdukKeluarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumKategoriProdukFilter<$PrismaModel = never> = {
    equals?: $Enums.KategoriProduk | EnumKategoriProdukFieldRefInput<$PrismaModel>
    in?: $Enums.KategoriProduk[]
    notIn?: $Enums.KategoriProduk[]
    not?: NestedEnumKategoriProdukFilter<$PrismaModel> | $Enums.KategoriProduk
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ProdukStokKadaluarsaListRelationFilter = {
    every?: ProdukStokKadaluarsaWhereInput
    some?: ProdukStokKadaluarsaWhereInput
    none?: ProdukStokKadaluarsaWhereInput
  }

  export type ProdukStokKadaluarsaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProdukOrderByRelevanceInput = {
    fields: ProdukOrderByRelevanceFieldEnum | ProdukOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProdukCountOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
    merk?: SortOrder
    kodeProduk?: SortOrder
    kategori?: SortOrder
    hargaModal?: SortOrder
    hargaJual?: SortOrder
    stok?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProdukAvgOrderByAggregateInput = {
    id?: SortOrder
    hargaModal?: SortOrder
    hargaJual?: SortOrder
    stok?: SortOrder
  }

  export type ProdukMaxOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
    merk?: SortOrder
    kodeProduk?: SortOrder
    kategori?: SortOrder
    hargaModal?: SortOrder
    hargaJual?: SortOrder
    stok?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProdukMinOrderByAggregateInput = {
    id?: SortOrder
    nama?: SortOrder
    merk?: SortOrder
    kodeProduk?: SortOrder
    kategori?: SortOrder
    hargaModal?: SortOrder
    hargaJual?: SortOrder
    stok?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProdukSumOrderByAggregateInput = {
    id?: SortOrder
    hargaModal?: SortOrder
    hargaJual?: SortOrder
    stok?: SortOrder
  }

  export type EnumKategoriProdukWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.KategoriProduk | EnumKategoriProdukFieldRefInput<$PrismaModel>
    in?: $Enums.KategoriProduk[]
    notIn?: $Enums.KategoriProduk[]
    not?: NestedEnumKategoriProdukWithAggregatesFilter<$PrismaModel> | $Enums.KategoriProduk
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKategoriProdukFilter<$PrismaModel>
    _max?: NestedEnumKategoriProdukFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ProdukScalarRelationFilter = {
    is?: ProdukWhereInput
    isNot?: ProdukWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProdukStokKadaluarsaCountOrderByAggregateInput = {
    id?: SortOrder
    produkId?: SortOrder
    stokAwal?: SortOrder
    sisaStok?: SortOrder
    tanggalExp?: SortOrder
  }

  export type ProdukStokKadaluarsaAvgOrderByAggregateInput = {
    id?: SortOrder
    produkId?: SortOrder
    stokAwal?: SortOrder
    sisaStok?: SortOrder
  }

  export type ProdukStokKadaluarsaMaxOrderByAggregateInput = {
    id?: SortOrder
    produkId?: SortOrder
    stokAwal?: SortOrder
    sisaStok?: SortOrder
    tanggalExp?: SortOrder
  }

  export type ProdukStokKadaluarsaMinOrderByAggregateInput = {
    id?: SortOrder
    produkId?: SortOrder
    stokAwal?: SortOrder
    sisaStok?: SortOrder
    tanggalExp?: SortOrder
  }

  export type ProdukStokKadaluarsaSumOrderByAggregateInput = {
    id?: SortOrder
    produkId?: SortOrder
    stokAwal?: SortOrder
    sisaStok?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProdukMasukCountOrderByAggregateInput = {
    id?: SortOrder
    produkId?: SortOrder
    userId?: SortOrder
    jumlah?: SortOrder
    hargaModal?: SortOrder
    tanggalMasuk?: SortOrder
    tanggalExp?: SortOrder
  }

  export type ProdukMasukAvgOrderByAggregateInput = {
    id?: SortOrder
    produkId?: SortOrder
    userId?: SortOrder
    jumlah?: SortOrder
    hargaModal?: SortOrder
  }

  export type ProdukMasukMaxOrderByAggregateInput = {
    id?: SortOrder
    produkId?: SortOrder
    userId?: SortOrder
    jumlah?: SortOrder
    hargaModal?: SortOrder
    tanggalMasuk?: SortOrder
    tanggalExp?: SortOrder
  }

  export type ProdukMasukMinOrderByAggregateInput = {
    id?: SortOrder
    produkId?: SortOrder
    userId?: SortOrder
    jumlah?: SortOrder
    hargaModal?: SortOrder
    tanggalMasuk?: SortOrder
    tanggalExp?: SortOrder
  }

  export type ProdukMasukSumOrderByAggregateInput = {
    id?: SortOrder
    produkId?: SortOrder
    userId?: SortOrder
    jumlah?: SortOrder
    hargaModal?: SortOrder
  }

  export type EnumStatusKeluarFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusKeluar | EnumStatusKeluarFieldRefInput<$PrismaModel>
    in?: $Enums.StatusKeluar[]
    notIn?: $Enums.StatusKeluar[]
    not?: NestedEnumStatusKeluarFilter<$PrismaModel> | $Enums.StatusKeluar
  }

  export type ProdukKeluarCountOrderByAggregateInput = {
    id?: SortOrder
    produkId?: SortOrder
    userId?: SortOrder
    jumlah?: SortOrder
    hargaModal?: SortOrder
    hargaJual?: SortOrder
    keuntungan?: SortOrder
    status?: SortOrder
    tanggalKeluar?: SortOrder
  }

  export type ProdukKeluarAvgOrderByAggregateInput = {
    id?: SortOrder
    produkId?: SortOrder
    userId?: SortOrder
    jumlah?: SortOrder
    hargaModal?: SortOrder
    hargaJual?: SortOrder
    keuntungan?: SortOrder
  }

  export type ProdukKeluarMaxOrderByAggregateInput = {
    id?: SortOrder
    produkId?: SortOrder
    userId?: SortOrder
    jumlah?: SortOrder
    hargaModal?: SortOrder
    hargaJual?: SortOrder
    keuntungan?: SortOrder
    status?: SortOrder
    tanggalKeluar?: SortOrder
  }

  export type ProdukKeluarMinOrderByAggregateInput = {
    id?: SortOrder
    produkId?: SortOrder
    userId?: SortOrder
    jumlah?: SortOrder
    hargaModal?: SortOrder
    hargaJual?: SortOrder
    keuntungan?: SortOrder
    status?: SortOrder
    tanggalKeluar?: SortOrder
  }

  export type ProdukKeluarSumOrderByAggregateInput = {
    id?: SortOrder
    produkId?: SortOrder
    userId?: SortOrder
    jumlah?: SortOrder
    hargaModal?: SortOrder
    hargaJual?: SortOrder
    keuntungan?: SortOrder
  }

  export type EnumStatusKeluarWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusKeluar | EnumStatusKeluarFieldRefInput<$PrismaModel>
    in?: $Enums.StatusKeluar[]
    notIn?: $Enums.StatusKeluar[]
    not?: NestedEnumStatusKeluarWithAggregatesFilter<$PrismaModel> | $Enums.StatusKeluar
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusKeluarFilter<$PrismaModel>
    _max?: NestedEnumStatusKeluarFilter<$PrismaModel>
  }

  export type ProdukMasukCreateNestedManyWithoutUserInput = {
    create?: XOR<ProdukMasukCreateWithoutUserInput, ProdukMasukUncheckedCreateWithoutUserInput> | ProdukMasukCreateWithoutUserInput[] | ProdukMasukUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdukMasukCreateOrConnectWithoutUserInput | ProdukMasukCreateOrConnectWithoutUserInput[]
    createMany?: ProdukMasukCreateManyUserInputEnvelope
    connect?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
  }

  export type ProdukKeluarCreateNestedManyWithoutUserInput = {
    create?: XOR<ProdukKeluarCreateWithoutUserInput, ProdukKeluarUncheckedCreateWithoutUserInput> | ProdukKeluarCreateWithoutUserInput[] | ProdukKeluarUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdukKeluarCreateOrConnectWithoutUserInput | ProdukKeluarCreateOrConnectWithoutUserInput[]
    createMany?: ProdukKeluarCreateManyUserInputEnvelope
    connect?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
  }

  export type ProdukMasukUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProdukMasukCreateWithoutUserInput, ProdukMasukUncheckedCreateWithoutUserInput> | ProdukMasukCreateWithoutUserInput[] | ProdukMasukUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdukMasukCreateOrConnectWithoutUserInput | ProdukMasukCreateOrConnectWithoutUserInput[]
    createMany?: ProdukMasukCreateManyUserInputEnvelope
    connect?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
  }

  export type ProdukKeluarUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProdukKeluarCreateWithoutUserInput, ProdukKeluarUncheckedCreateWithoutUserInput> | ProdukKeluarCreateWithoutUserInput[] | ProdukKeluarUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdukKeluarCreateOrConnectWithoutUserInput | ProdukKeluarCreateOrConnectWithoutUserInput[]
    createMany?: ProdukKeluarCreateManyUserInputEnvelope
    connect?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProdukMasukUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProdukMasukCreateWithoutUserInput, ProdukMasukUncheckedCreateWithoutUserInput> | ProdukMasukCreateWithoutUserInput[] | ProdukMasukUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdukMasukCreateOrConnectWithoutUserInput | ProdukMasukCreateOrConnectWithoutUserInput[]
    upsert?: ProdukMasukUpsertWithWhereUniqueWithoutUserInput | ProdukMasukUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProdukMasukCreateManyUserInputEnvelope
    set?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    disconnect?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    delete?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    connect?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    update?: ProdukMasukUpdateWithWhereUniqueWithoutUserInput | ProdukMasukUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProdukMasukUpdateManyWithWhereWithoutUserInput | ProdukMasukUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProdukMasukScalarWhereInput | ProdukMasukScalarWhereInput[]
  }

  export type ProdukKeluarUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProdukKeluarCreateWithoutUserInput, ProdukKeluarUncheckedCreateWithoutUserInput> | ProdukKeluarCreateWithoutUserInput[] | ProdukKeluarUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdukKeluarCreateOrConnectWithoutUserInput | ProdukKeluarCreateOrConnectWithoutUserInput[]
    upsert?: ProdukKeluarUpsertWithWhereUniqueWithoutUserInput | ProdukKeluarUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProdukKeluarCreateManyUserInputEnvelope
    set?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    disconnect?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    delete?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    connect?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    update?: ProdukKeluarUpdateWithWhereUniqueWithoutUserInput | ProdukKeluarUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProdukKeluarUpdateManyWithWhereWithoutUserInput | ProdukKeluarUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProdukKeluarScalarWhereInput | ProdukKeluarScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProdukMasukUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProdukMasukCreateWithoutUserInput, ProdukMasukUncheckedCreateWithoutUserInput> | ProdukMasukCreateWithoutUserInput[] | ProdukMasukUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdukMasukCreateOrConnectWithoutUserInput | ProdukMasukCreateOrConnectWithoutUserInput[]
    upsert?: ProdukMasukUpsertWithWhereUniqueWithoutUserInput | ProdukMasukUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProdukMasukCreateManyUserInputEnvelope
    set?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    disconnect?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    delete?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    connect?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    update?: ProdukMasukUpdateWithWhereUniqueWithoutUserInput | ProdukMasukUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProdukMasukUpdateManyWithWhereWithoutUserInput | ProdukMasukUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProdukMasukScalarWhereInput | ProdukMasukScalarWhereInput[]
  }

  export type ProdukKeluarUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProdukKeluarCreateWithoutUserInput, ProdukKeluarUncheckedCreateWithoutUserInput> | ProdukKeluarCreateWithoutUserInput[] | ProdukKeluarUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdukKeluarCreateOrConnectWithoutUserInput | ProdukKeluarCreateOrConnectWithoutUserInput[]
    upsert?: ProdukKeluarUpsertWithWhereUniqueWithoutUserInput | ProdukKeluarUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProdukKeluarCreateManyUserInputEnvelope
    set?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    disconnect?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    delete?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    connect?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    update?: ProdukKeluarUpdateWithWhereUniqueWithoutUserInput | ProdukKeluarUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProdukKeluarUpdateManyWithWhereWithoutUserInput | ProdukKeluarUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProdukKeluarScalarWhereInput | ProdukKeluarScalarWhereInput[]
  }

  export type ProdukStokKadaluarsaCreateNestedManyWithoutProdukInput = {
    create?: XOR<ProdukStokKadaluarsaCreateWithoutProdukInput, ProdukStokKadaluarsaUncheckedCreateWithoutProdukInput> | ProdukStokKadaluarsaCreateWithoutProdukInput[] | ProdukStokKadaluarsaUncheckedCreateWithoutProdukInput[]
    connectOrCreate?: ProdukStokKadaluarsaCreateOrConnectWithoutProdukInput | ProdukStokKadaluarsaCreateOrConnectWithoutProdukInput[]
    createMany?: ProdukStokKadaluarsaCreateManyProdukInputEnvelope
    connect?: ProdukStokKadaluarsaWhereUniqueInput | ProdukStokKadaluarsaWhereUniqueInput[]
  }

  export type ProdukMasukCreateNestedManyWithoutProdukInput = {
    create?: XOR<ProdukMasukCreateWithoutProdukInput, ProdukMasukUncheckedCreateWithoutProdukInput> | ProdukMasukCreateWithoutProdukInput[] | ProdukMasukUncheckedCreateWithoutProdukInput[]
    connectOrCreate?: ProdukMasukCreateOrConnectWithoutProdukInput | ProdukMasukCreateOrConnectWithoutProdukInput[]
    createMany?: ProdukMasukCreateManyProdukInputEnvelope
    connect?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
  }

  export type ProdukKeluarCreateNestedManyWithoutProdukInput = {
    create?: XOR<ProdukKeluarCreateWithoutProdukInput, ProdukKeluarUncheckedCreateWithoutProdukInput> | ProdukKeluarCreateWithoutProdukInput[] | ProdukKeluarUncheckedCreateWithoutProdukInput[]
    connectOrCreate?: ProdukKeluarCreateOrConnectWithoutProdukInput | ProdukKeluarCreateOrConnectWithoutProdukInput[]
    createMany?: ProdukKeluarCreateManyProdukInputEnvelope
    connect?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
  }

  export type ProdukStokKadaluarsaUncheckedCreateNestedManyWithoutProdukInput = {
    create?: XOR<ProdukStokKadaluarsaCreateWithoutProdukInput, ProdukStokKadaluarsaUncheckedCreateWithoutProdukInput> | ProdukStokKadaluarsaCreateWithoutProdukInput[] | ProdukStokKadaluarsaUncheckedCreateWithoutProdukInput[]
    connectOrCreate?: ProdukStokKadaluarsaCreateOrConnectWithoutProdukInput | ProdukStokKadaluarsaCreateOrConnectWithoutProdukInput[]
    createMany?: ProdukStokKadaluarsaCreateManyProdukInputEnvelope
    connect?: ProdukStokKadaluarsaWhereUniqueInput | ProdukStokKadaluarsaWhereUniqueInput[]
  }

  export type ProdukMasukUncheckedCreateNestedManyWithoutProdukInput = {
    create?: XOR<ProdukMasukCreateWithoutProdukInput, ProdukMasukUncheckedCreateWithoutProdukInput> | ProdukMasukCreateWithoutProdukInput[] | ProdukMasukUncheckedCreateWithoutProdukInput[]
    connectOrCreate?: ProdukMasukCreateOrConnectWithoutProdukInput | ProdukMasukCreateOrConnectWithoutProdukInput[]
    createMany?: ProdukMasukCreateManyProdukInputEnvelope
    connect?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
  }

  export type ProdukKeluarUncheckedCreateNestedManyWithoutProdukInput = {
    create?: XOR<ProdukKeluarCreateWithoutProdukInput, ProdukKeluarUncheckedCreateWithoutProdukInput> | ProdukKeluarCreateWithoutProdukInput[] | ProdukKeluarUncheckedCreateWithoutProdukInput[]
    connectOrCreate?: ProdukKeluarCreateOrConnectWithoutProdukInput | ProdukKeluarCreateOrConnectWithoutProdukInput[]
    createMany?: ProdukKeluarCreateManyProdukInputEnvelope
    connect?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
  }

  export type EnumKategoriProdukFieldUpdateOperationsInput = {
    set?: $Enums.KategoriProduk
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProdukStokKadaluarsaUpdateManyWithoutProdukNestedInput = {
    create?: XOR<ProdukStokKadaluarsaCreateWithoutProdukInput, ProdukStokKadaluarsaUncheckedCreateWithoutProdukInput> | ProdukStokKadaluarsaCreateWithoutProdukInput[] | ProdukStokKadaluarsaUncheckedCreateWithoutProdukInput[]
    connectOrCreate?: ProdukStokKadaluarsaCreateOrConnectWithoutProdukInput | ProdukStokKadaluarsaCreateOrConnectWithoutProdukInput[]
    upsert?: ProdukStokKadaluarsaUpsertWithWhereUniqueWithoutProdukInput | ProdukStokKadaluarsaUpsertWithWhereUniqueWithoutProdukInput[]
    createMany?: ProdukStokKadaluarsaCreateManyProdukInputEnvelope
    set?: ProdukStokKadaluarsaWhereUniqueInput | ProdukStokKadaluarsaWhereUniqueInput[]
    disconnect?: ProdukStokKadaluarsaWhereUniqueInput | ProdukStokKadaluarsaWhereUniqueInput[]
    delete?: ProdukStokKadaluarsaWhereUniqueInput | ProdukStokKadaluarsaWhereUniqueInput[]
    connect?: ProdukStokKadaluarsaWhereUniqueInput | ProdukStokKadaluarsaWhereUniqueInput[]
    update?: ProdukStokKadaluarsaUpdateWithWhereUniqueWithoutProdukInput | ProdukStokKadaluarsaUpdateWithWhereUniqueWithoutProdukInput[]
    updateMany?: ProdukStokKadaluarsaUpdateManyWithWhereWithoutProdukInput | ProdukStokKadaluarsaUpdateManyWithWhereWithoutProdukInput[]
    deleteMany?: ProdukStokKadaluarsaScalarWhereInput | ProdukStokKadaluarsaScalarWhereInput[]
  }

  export type ProdukMasukUpdateManyWithoutProdukNestedInput = {
    create?: XOR<ProdukMasukCreateWithoutProdukInput, ProdukMasukUncheckedCreateWithoutProdukInput> | ProdukMasukCreateWithoutProdukInput[] | ProdukMasukUncheckedCreateWithoutProdukInput[]
    connectOrCreate?: ProdukMasukCreateOrConnectWithoutProdukInput | ProdukMasukCreateOrConnectWithoutProdukInput[]
    upsert?: ProdukMasukUpsertWithWhereUniqueWithoutProdukInput | ProdukMasukUpsertWithWhereUniqueWithoutProdukInput[]
    createMany?: ProdukMasukCreateManyProdukInputEnvelope
    set?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    disconnect?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    delete?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    connect?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    update?: ProdukMasukUpdateWithWhereUniqueWithoutProdukInput | ProdukMasukUpdateWithWhereUniqueWithoutProdukInput[]
    updateMany?: ProdukMasukUpdateManyWithWhereWithoutProdukInput | ProdukMasukUpdateManyWithWhereWithoutProdukInput[]
    deleteMany?: ProdukMasukScalarWhereInput | ProdukMasukScalarWhereInput[]
  }

  export type ProdukKeluarUpdateManyWithoutProdukNestedInput = {
    create?: XOR<ProdukKeluarCreateWithoutProdukInput, ProdukKeluarUncheckedCreateWithoutProdukInput> | ProdukKeluarCreateWithoutProdukInput[] | ProdukKeluarUncheckedCreateWithoutProdukInput[]
    connectOrCreate?: ProdukKeluarCreateOrConnectWithoutProdukInput | ProdukKeluarCreateOrConnectWithoutProdukInput[]
    upsert?: ProdukKeluarUpsertWithWhereUniqueWithoutProdukInput | ProdukKeluarUpsertWithWhereUniqueWithoutProdukInput[]
    createMany?: ProdukKeluarCreateManyProdukInputEnvelope
    set?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    disconnect?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    delete?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    connect?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    update?: ProdukKeluarUpdateWithWhereUniqueWithoutProdukInput | ProdukKeluarUpdateWithWhereUniqueWithoutProdukInput[]
    updateMany?: ProdukKeluarUpdateManyWithWhereWithoutProdukInput | ProdukKeluarUpdateManyWithWhereWithoutProdukInput[]
    deleteMany?: ProdukKeluarScalarWhereInput | ProdukKeluarScalarWhereInput[]
  }

  export type ProdukStokKadaluarsaUncheckedUpdateManyWithoutProdukNestedInput = {
    create?: XOR<ProdukStokKadaluarsaCreateWithoutProdukInput, ProdukStokKadaluarsaUncheckedCreateWithoutProdukInput> | ProdukStokKadaluarsaCreateWithoutProdukInput[] | ProdukStokKadaluarsaUncheckedCreateWithoutProdukInput[]
    connectOrCreate?: ProdukStokKadaluarsaCreateOrConnectWithoutProdukInput | ProdukStokKadaluarsaCreateOrConnectWithoutProdukInput[]
    upsert?: ProdukStokKadaluarsaUpsertWithWhereUniqueWithoutProdukInput | ProdukStokKadaluarsaUpsertWithWhereUniqueWithoutProdukInput[]
    createMany?: ProdukStokKadaluarsaCreateManyProdukInputEnvelope
    set?: ProdukStokKadaluarsaWhereUniqueInput | ProdukStokKadaluarsaWhereUniqueInput[]
    disconnect?: ProdukStokKadaluarsaWhereUniqueInput | ProdukStokKadaluarsaWhereUniqueInput[]
    delete?: ProdukStokKadaluarsaWhereUniqueInput | ProdukStokKadaluarsaWhereUniqueInput[]
    connect?: ProdukStokKadaluarsaWhereUniqueInput | ProdukStokKadaluarsaWhereUniqueInput[]
    update?: ProdukStokKadaluarsaUpdateWithWhereUniqueWithoutProdukInput | ProdukStokKadaluarsaUpdateWithWhereUniqueWithoutProdukInput[]
    updateMany?: ProdukStokKadaluarsaUpdateManyWithWhereWithoutProdukInput | ProdukStokKadaluarsaUpdateManyWithWhereWithoutProdukInput[]
    deleteMany?: ProdukStokKadaluarsaScalarWhereInput | ProdukStokKadaluarsaScalarWhereInput[]
  }

  export type ProdukMasukUncheckedUpdateManyWithoutProdukNestedInput = {
    create?: XOR<ProdukMasukCreateWithoutProdukInput, ProdukMasukUncheckedCreateWithoutProdukInput> | ProdukMasukCreateWithoutProdukInput[] | ProdukMasukUncheckedCreateWithoutProdukInput[]
    connectOrCreate?: ProdukMasukCreateOrConnectWithoutProdukInput | ProdukMasukCreateOrConnectWithoutProdukInput[]
    upsert?: ProdukMasukUpsertWithWhereUniqueWithoutProdukInput | ProdukMasukUpsertWithWhereUniqueWithoutProdukInput[]
    createMany?: ProdukMasukCreateManyProdukInputEnvelope
    set?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    disconnect?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    delete?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    connect?: ProdukMasukWhereUniqueInput | ProdukMasukWhereUniqueInput[]
    update?: ProdukMasukUpdateWithWhereUniqueWithoutProdukInput | ProdukMasukUpdateWithWhereUniqueWithoutProdukInput[]
    updateMany?: ProdukMasukUpdateManyWithWhereWithoutProdukInput | ProdukMasukUpdateManyWithWhereWithoutProdukInput[]
    deleteMany?: ProdukMasukScalarWhereInput | ProdukMasukScalarWhereInput[]
  }

  export type ProdukKeluarUncheckedUpdateManyWithoutProdukNestedInput = {
    create?: XOR<ProdukKeluarCreateWithoutProdukInput, ProdukKeluarUncheckedCreateWithoutProdukInput> | ProdukKeluarCreateWithoutProdukInput[] | ProdukKeluarUncheckedCreateWithoutProdukInput[]
    connectOrCreate?: ProdukKeluarCreateOrConnectWithoutProdukInput | ProdukKeluarCreateOrConnectWithoutProdukInput[]
    upsert?: ProdukKeluarUpsertWithWhereUniqueWithoutProdukInput | ProdukKeluarUpsertWithWhereUniqueWithoutProdukInput[]
    createMany?: ProdukKeluarCreateManyProdukInputEnvelope
    set?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    disconnect?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    delete?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    connect?: ProdukKeluarWhereUniqueInput | ProdukKeluarWhereUniqueInput[]
    update?: ProdukKeluarUpdateWithWhereUniqueWithoutProdukInput | ProdukKeluarUpdateWithWhereUniqueWithoutProdukInput[]
    updateMany?: ProdukKeluarUpdateManyWithWhereWithoutProdukInput | ProdukKeluarUpdateManyWithWhereWithoutProdukInput[]
    deleteMany?: ProdukKeluarScalarWhereInput | ProdukKeluarScalarWhereInput[]
  }

  export type ProdukCreateNestedOneWithoutStokBatchInput = {
    create?: XOR<ProdukCreateWithoutStokBatchInput, ProdukUncheckedCreateWithoutStokBatchInput>
    connectOrCreate?: ProdukCreateOrConnectWithoutStokBatchInput
    connect?: ProdukWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ProdukUpdateOneRequiredWithoutStokBatchNestedInput = {
    create?: XOR<ProdukCreateWithoutStokBatchInput, ProdukUncheckedCreateWithoutStokBatchInput>
    connectOrCreate?: ProdukCreateOrConnectWithoutStokBatchInput
    upsert?: ProdukUpsertWithoutStokBatchInput
    connect?: ProdukWhereUniqueInput
    update?: XOR<XOR<ProdukUpdateToOneWithWhereWithoutStokBatchInput, ProdukUpdateWithoutStokBatchInput>, ProdukUncheckedUpdateWithoutStokBatchInput>
  }

  export type ProdukCreateNestedOneWithoutProdukMasukInput = {
    create?: XOR<ProdukCreateWithoutProdukMasukInput, ProdukUncheckedCreateWithoutProdukMasukInput>
    connectOrCreate?: ProdukCreateOrConnectWithoutProdukMasukInput
    connect?: ProdukWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProdukMasukInput = {
    create?: XOR<UserCreateWithoutProdukMasukInput, UserUncheckedCreateWithoutProdukMasukInput>
    connectOrCreate?: UserCreateOrConnectWithoutProdukMasukInput
    connect?: UserWhereUniqueInput
  }

  export type ProdukUpdateOneRequiredWithoutProdukMasukNestedInput = {
    create?: XOR<ProdukCreateWithoutProdukMasukInput, ProdukUncheckedCreateWithoutProdukMasukInput>
    connectOrCreate?: ProdukCreateOrConnectWithoutProdukMasukInput
    upsert?: ProdukUpsertWithoutProdukMasukInput
    connect?: ProdukWhereUniqueInput
    update?: XOR<XOR<ProdukUpdateToOneWithWhereWithoutProdukMasukInput, ProdukUpdateWithoutProdukMasukInput>, ProdukUncheckedUpdateWithoutProdukMasukInput>
  }

  export type UserUpdateOneRequiredWithoutProdukMasukNestedInput = {
    create?: XOR<UserCreateWithoutProdukMasukInput, UserUncheckedCreateWithoutProdukMasukInput>
    connectOrCreate?: UserCreateOrConnectWithoutProdukMasukInput
    upsert?: UserUpsertWithoutProdukMasukInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProdukMasukInput, UserUpdateWithoutProdukMasukInput>, UserUncheckedUpdateWithoutProdukMasukInput>
  }

  export type ProdukCreateNestedOneWithoutProdukKeluarInput = {
    create?: XOR<ProdukCreateWithoutProdukKeluarInput, ProdukUncheckedCreateWithoutProdukKeluarInput>
    connectOrCreate?: ProdukCreateOrConnectWithoutProdukKeluarInput
    connect?: ProdukWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProdukKeluarInput = {
    create?: XOR<UserCreateWithoutProdukKeluarInput, UserUncheckedCreateWithoutProdukKeluarInput>
    connectOrCreate?: UserCreateOrConnectWithoutProdukKeluarInput
    connect?: UserWhereUniqueInput
  }

  export type EnumStatusKeluarFieldUpdateOperationsInput = {
    set?: $Enums.StatusKeluar
  }

  export type ProdukUpdateOneRequiredWithoutProdukKeluarNestedInput = {
    create?: XOR<ProdukCreateWithoutProdukKeluarInput, ProdukUncheckedCreateWithoutProdukKeluarInput>
    connectOrCreate?: ProdukCreateOrConnectWithoutProdukKeluarInput
    upsert?: ProdukUpsertWithoutProdukKeluarInput
    connect?: ProdukWhereUniqueInput
    update?: XOR<XOR<ProdukUpdateToOneWithWhereWithoutProdukKeluarInput, ProdukUpdateWithoutProdukKeluarInput>, ProdukUncheckedUpdateWithoutProdukKeluarInput>
  }

  export type UserUpdateOneRequiredWithoutProdukKeluarNestedInput = {
    create?: XOR<UserCreateWithoutProdukKeluarInput, UserUncheckedCreateWithoutProdukKeluarInput>
    connectOrCreate?: UserCreateOrConnectWithoutProdukKeluarInput
    upsert?: UserUpsertWithoutProdukKeluarInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProdukKeluarInput, UserUpdateWithoutProdukKeluarInput>, UserUncheckedUpdateWithoutProdukKeluarInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumKategoriProdukFilter<$PrismaModel = never> = {
    equals?: $Enums.KategoriProduk | EnumKategoriProdukFieldRefInput<$PrismaModel>
    in?: $Enums.KategoriProduk[]
    notIn?: $Enums.KategoriProduk[]
    not?: NestedEnumKategoriProdukFilter<$PrismaModel> | $Enums.KategoriProduk
  }

  export type NestedEnumKategoriProdukWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.KategoriProduk | EnumKategoriProdukFieldRefInput<$PrismaModel>
    in?: $Enums.KategoriProduk[]
    notIn?: $Enums.KategoriProduk[]
    not?: NestedEnumKategoriProdukWithAggregatesFilter<$PrismaModel> | $Enums.KategoriProduk
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKategoriProdukFilter<$PrismaModel>
    _max?: NestedEnumKategoriProdukFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumStatusKeluarFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusKeluar | EnumStatusKeluarFieldRefInput<$PrismaModel>
    in?: $Enums.StatusKeluar[]
    notIn?: $Enums.StatusKeluar[]
    not?: NestedEnumStatusKeluarFilter<$PrismaModel> | $Enums.StatusKeluar
  }

  export type NestedEnumStatusKeluarWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusKeluar | EnumStatusKeluarFieldRefInput<$PrismaModel>
    in?: $Enums.StatusKeluar[]
    notIn?: $Enums.StatusKeluar[]
    not?: NestedEnumStatusKeluarWithAggregatesFilter<$PrismaModel> | $Enums.StatusKeluar
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusKeluarFilter<$PrismaModel>
    _max?: NestedEnumStatusKeluarFilter<$PrismaModel>
  }

  export type ProdukMasukCreateWithoutUserInput = {
    jumlah: number
    hargaModal: number
    tanggalMasuk: Date | string
    tanggalExp?: Date | string | null
    produk: ProdukCreateNestedOneWithoutProdukMasukInput
  }

  export type ProdukMasukUncheckedCreateWithoutUserInput = {
    id?: number
    produkId: number
    jumlah: number
    hargaModal: number
    tanggalMasuk: Date | string
    tanggalExp?: Date | string | null
  }

  export type ProdukMasukCreateOrConnectWithoutUserInput = {
    where: ProdukMasukWhereUniqueInput
    create: XOR<ProdukMasukCreateWithoutUserInput, ProdukMasukUncheckedCreateWithoutUserInput>
  }

  export type ProdukMasukCreateManyUserInputEnvelope = {
    data: ProdukMasukCreateManyUserInput | ProdukMasukCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProdukKeluarCreateWithoutUserInput = {
    jumlah: number
    hargaModal: number
    hargaJual: number
    keuntungan: number
    status: $Enums.StatusKeluar
    tanggalKeluar: Date | string
    produk: ProdukCreateNestedOneWithoutProdukKeluarInput
  }

  export type ProdukKeluarUncheckedCreateWithoutUserInput = {
    id?: number
    produkId: number
    jumlah: number
    hargaModal: number
    hargaJual: number
    keuntungan: number
    status: $Enums.StatusKeluar
    tanggalKeluar: Date | string
  }

  export type ProdukKeluarCreateOrConnectWithoutUserInput = {
    where: ProdukKeluarWhereUniqueInput
    create: XOR<ProdukKeluarCreateWithoutUserInput, ProdukKeluarUncheckedCreateWithoutUserInput>
  }

  export type ProdukKeluarCreateManyUserInputEnvelope = {
    data: ProdukKeluarCreateManyUserInput | ProdukKeluarCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProdukMasukUpsertWithWhereUniqueWithoutUserInput = {
    where: ProdukMasukWhereUniqueInput
    update: XOR<ProdukMasukUpdateWithoutUserInput, ProdukMasukUncheckedUpdateWithoutUserInput>
    create: XOR<ProdukMasukCreateWithoutUserInput, ProdukMasukUncheckedCreateWithoutUserInput>
  }

  export type ProdukMasukUpdateWithWhereUniqueWithoutUserInput = {
    where: ProdukMasukWhereUniqueInput
    data: XOR<ProdukMasukUpdateWithoutUserInput, ProdukMasukUncheckedUpdateWithoutUserInput>
  }

  export type ProdukMasukUpdateManyWithWhereWithoutUserInput = {
    where: ProdukMasukScalarWhereInput
    data: XOR<ProdukMasukUpdateManyMutationInput, ProdukMasukUncheckedUpdateManyWithoutUserInput>
  }

  export type ProdukMasukScalarWhereInput = {
    AND?: ProdukMasukScalarWhereInput | ProdukMasukScalarWhereInput[]
    OR?: ProdukMasukScalarWhereInput[]
    NOT?: ProdukMasukScalarWhereInput | ProdukMasukScalarWhereInput[]
    id?: IntFilter<"ProdukMasuk"> | number
    produkId?: IntFilter<"ProdukMasuk"> | number
    userId?: IntFilter<"ProdukMasuk"> | number
    jumlah?: IntFilter<"ProdukMasuk"> | number
    hargaModal?: FloatFilter<"ProdukMasuk"> | number
    tanggalMasuk?: DateTimeFilter<"ProdukMasuk"> | Date | string
    tanggalExp?: DateTimeNullableFilter<"ProdukMasuk"> | Date | string | null
  }

  export type ProdukKeluarUpsertWithWhereUniqueWithoutUserInput = {
    where: ProdukKeluarWhereUniqueInput
    update: XOR<ProdukKeluarUpdateWithoutUserInput, ProdukKeluarUncheckedUpdateWithoutUserInput>
    create: XOR<ProdukKeluarCreateWithoutUserInput, ProdukKeluarUncheckedCreateWithoutUserInput>
  }

  export type ProdukKeluarUpdateWithWhereUniqueWithoutUserInput = {
    where: ProdukKeluarWhereUniqueInput
    data: XOR<ProdukKeluarUpdateWithoutUserInput, ProdukKeluarUncheckedUpdateWithoutUserInput>
  }

  export type ProdukKeluarUpdateManyWithWhereWithoutUserInput = {
    where: ProdukKeluarScalarWhereInput
    data: XOR<ProdukKeluarUpdateManyMutationInput, ProdukKeluarUncheckedUpdateManyWithoutUserInput>
  }

  export type ProdukKeluarScalarWhereInput = {
    AND?: ProdukKeluarScalarWhereInput | ProdukKeluarScalarWhereInput[]
    OR?: ProdukKeluarScalarWhereInput[]
    NOT?: ProdukKeluarScalarWhereInput | ProdukKeluarScalarWhereInput[]
    id?: IntFilter<"ProdukKeluar"> | number
    produkId?: IntFilter<"ProdukKeluar"> | number
    userId?: IntFilter<"ProdukKeluar"> | number
    jumlah?: IntFilter<"ProdukKeluar"> | number
    hargaModal?: FloatFilter<"ProdukKeluar"> | number
    hargaJual?: FloatFilter<"ProdukKeluar"> | number
    keuntungan?: FloatFilter<"ProdukKeluar"> | number
    status?: EnumStatusKeluarFilter<"ProdukKeluar"> | $Enums.StatusKeluar
    tanggalKeluar?: DateTimeFilter<"ProdukKeluar"> | Date | string
  }

  export type ProdukStokKadaluarsaCreateWithoutProdukInput = {
    stokAwal: number
    sisaStok: number
    tanggalExp?: Date | string | null
  }

  export type ProdukStokKadaluarsaUncheckedCreateWithoutProdukInput = {
    id?: number
    stokAwal: number
    sisaStok: number
    tanggalExp?: Date | string | null
  }

  export type ProdukStokKadaluarsaCreateOrConnectWithoutProdukInput = {
    where: ProdukStokKadaluarsaWhereUniqueInput
    create: XOR<ProdukStokKadaluarsaCreateWithoutProdukInput, ProdukStokKadaluarsaUncheckedCreateWithoutProdukInput>
  }

  export type ProdukStokKadaluarsaCreateManyProdukInputEnvelope = {
    data: ProdukStokKadaluarsaCreateManyProdukInput | ProdukStokKadaluarsaCreateManyProdukInput[]
    skipDuplicates?: boolean
  }

  export type ProdukMasukCreateWithoutProdukInput = {
    jumlah: number
    hargaModal: number
    tanggalMasuk: Date | string
    tanggalExp?: Date | string | null
    user: UserCreateNestedOneWithoutProdukMasukInput
  }

  export type ProdukMasukUncheckedCreateWithoutProdukInput = {
    id?: number
    userId: number
    jumlah: number
    hargaModal: number
    tanggalMasuk: Date | string
    tanggalExp?: Date | string | null
  }

  export type ProdukMasukCreateOrConnectWithoutProdukInput = {
    where: ProdukMasukWhereUniqueInput
    create: XOR<ProdukMasukCreateWithoutProdukInput, ProdukMasukUncheckedCreateWithoutProdukInput>
  }

  export type ProdukMasukCreateManyProdukInputEnvelope = {
    data: ProdukMasukCreateManyProdukInput | ProdukMasukCreateManyProdukInput[]
    skipDuplicates?: boolean
  }

  export type ProdukKeluarCreateWithoutProdukInput = {
    jumlah: number
    hargaModal: number
    hargaJual: number
    keuntungan: number
    status: $Enums.StatusKeluar
    tanggalKeluar: Date | string
    user: UserCreateNestedOneWithoutProdukKeluarInput
  }

  export type ProdukKeluarUncheckedCreateWithoutProdukInput = {
    id?: number
    userId: number
    jumlah: number
    hargaModal: number
    hargaJual: number
    keuntungan: number
    status: $Enums.StatusKeluar
    tanggalKeluar: Date | string
  }

  export type ProdukKeluarCreateOrConnectWithoutProdukInput = {
    where: ProdukKeluarWhereUniqueInput
    create: XOR<ProdukKeluarCreateWithoutProdukInput, ProdukKeluarUncheckedCreateWithoutProdukInput>
  }

  export type ProdukKeluarCreateManyProdukInputEnvelope = {
    data: ProdukKeluarCreateManyProdukInput | ProdukKeluarCreateManyProdukInput[]
    skipDuplicates?: boolean
  }

  export type ProdukStokKadaluarsaUpsertWithWhereUniqueWithoutProdukInput = {
    where: ProdukStokKadaluarsaWhereUniqueInput
    update: XOR<ProdukStokKadaluarsaUpdateWithoutProdukInput, ProdukStokKadaluarsaUncheckedUpdateWithoutProdukInput>
    create: XOR<ProdukStokKadaluarsaCreateWithoutProdukInput, ProdukStokKadaluarsaUncheckedCreateWithoutProdukInput>
  }

  export type ProdukStokKadaluarsaUpdateWithWhereUniqueWithoutProdukInput = {
    where: ProdukStokKadaluarsaWhereUniqueInput
    data: XOR<ProdukStokKadaluarsaUpdateWithoutProdukInput, ProdukStokKadaluarsaUncheckedUpdateWithoutProdukInput>
  }

  export type ProdukStokKadaluarsaUpdateManyWithWhereWithoutProdukInput = {
    where: ProdukStokKadaluarsaScalarWhereInput
    data: XOR<ProdukStokKadaluarsaUpdateManyMutationInput, ProdukStokKadaluarsaUncheckedUpdateManyWithoutProdukInput>
  }

  export type ProdukStokKadaluarsaScalarWhereInput = {
    AND?: ProdukStokKadaluarsaScalarWhereInput | ProdukStokKadaluarsaScalarWhereInput[]
    OR?: ProdukStokKadaluarsaScalarWhereInput[]
    NOT?: ProdukStokKadaluarsaScalarWhereInput | ProdukStokKadaluarsaScalarWhereInput[]
    id?: IntFilter<"ProdukStokKadaluarsa"> | number
    produkId?: IntFilter<"ProdukStokKadaluarsa"> | number
    stokAwal?: IntFilter<"ProdukStokKadaluarsa"> | number
    sisaStok?: IntFilter<"ProdukStokKadaluarsa"> | number
    tanggalExp?: DateTimeNullableFilter<"ProdukStokKadaluarsa"> | Date | string | null
  }

  export type ProdukMasukUpsertWithWhereUniqueWithoutProdukInput = {
    where: ProdukMasukWhereUniqueInput
    update: XOR<ProdukMasukUpdateWithoutProdukInput, ProdukMasukUncheckedUpdateWithoutProdukInput>
    create: XOR<ProdukMasukCreateWithoutProdukInput, ProdukMasukUncheckedCreateWithoutProdukInput>
  }

  export type ProdukMasukUpdateWithWhereUniqueWithoutProdukInput = {
    where: ProdukMasukWhereUniqueInput
    data: XOR<ProdukMasukUpdateWithoutProdukInput, ProdukMasukUncheckedUpdateWithoutProdukInput>
  }

  export type ProdukMasukUpdateManyWithWhereWithoutProdukInput = {
    where: ProdukMasukScalarWhereInput
    data: XOR<ProdukMasukUpdateManyMutationInput, ProdukMasukUncheckedUpdateManyWithoutProdukInput>
  }

  export type ProdukKeluarUpsertWithWhereUniqueWithoutProdukInput = {
    where: ProdukKeluarWhereUniqueInput
    update: XOR<ProdukKeluarUpdateWithoutProdukInput, ProdukKeluarUncheckedUpdateWithoutProdukInput>
    create: XOR<ProdukKeluarCreateWithoutProdukInput, ProdukKeluarUncheckedCreateWithoutProdukInput>
  }

  export type ProdukKeluarUpdateWithWhereUniqueWithoutProdukInput = {
    where: ProdukKeluarWhereUniqueInput
    data: XOR<ProdukKeluarUpdateWithoutProdukInput, ProdukKeluarUncheckedUpdateWithoutProdukInput>
  }

  export type ProdukKeluarUpdateManyWithWhereWithoutProdukInput = {
    where: ProdukKeluarScalarWhereInput
    data: XOR<ProdukKeluarUpdateManyMutationInput, ProdukKeluarUncheckedUpdateManyWithoutProdukInput>
  }

  export type ProdukCreateWithoutStokBatchInput = {
    nama: string
    merk: string
    kodeProduk: string
    kategori: $Enums.KategoriProduk
    hargaModal: number
    hargaJual: number
    stok?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    produkMasuk?: ProdukMasukCreateNestedManyWithoutProdukInput
    produkKeluar?: ProdukKeluarCreateNestedManyWithoutProdukInput
  }

  export type ProdukUncheckedCreateWithoutStokBatchInput = {
    id?: number
    nama: string
    merk: string
    kodeProduk: string
    kategori: $Enums.KategoriProduk
    hargaModal: number
    hargaJual: number
    stok?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    produkMasuk?: ProdukMasukUncheckedCreateNestedManyWithoutProdukInput
    produkKeluar?: ProdukKeluarUncheckedCreateNestedManyWithoutProdukInput
  }

  export type ProdukCreateOrConnectWithoutStokBatchInput = {
    where: ProdukWhereUniqueInput
    create: XOR<ProdukCreateWithoutStokBatchInput, ProdukUncheckedCreateWithoutStokBatchInput>
  }

  export type ProdukUpsertWithoutStokBatchInput = {
    update: XOR<ProdukUpdateWithoutStokBatchInput, ProdukUncheckedUpdateWithoutStokBatchInput>
    create: XOR<ProdukCreateWithoutStokBatchInput, ProdukUncheckedCreateWithoutStokBatchInput>
    where?: ProdukWhereInput
  }

  export type ProdukUpdateToOneWithWhereWithoutStokBatchInput = {
    where?: ProdukWhereInput
    data: XOR<ProdukUpdateWithoutStokBatchInput, ProdukUncheckedUpdateWithoutStokBatchInput>
  }

  export type ProdukUpdateWithoutStokBatchInput = {
    nama?: StringFieldUpdateOperationsInput | string
    merk?: StringFieldUpdateOperationsInput | string
    kodeProduk?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriProdukFieldUpdateOperationsInput | $Enums.KategoriProduk
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    stok?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    produkMasuk?: ProdukMasukUpdateManyWithoutProdukNestedInput
    produkKeluar?: ProdukKeluarUpdateManyWithoutProdukNestedInput
  }

  export type ProdukUncheckedUpdateWithoutStokBatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    merk?: StringFieldUpdateOperationsInput | string
    kodeProduk?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriProdukFieldUpdateOperationsInput | $Enums.KategoriProduk
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    stok?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    produkMasuk?: ProdukMasukUncheckedUpdateManyWithoutProdukNestedInput
    produkKeluar?: ProdukKeluarUncheckedUpdateManyWithoutProdukNestedInput
  }

  export type ProdukCreateWithoutProdukMasukInput = {
    nama: string
    merk: string
    kodeProduk: string
    kategori: $Enums.KategoriProduk
    hargaModal: number
    hargaJual: number
    stok?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    stokBatch?: ProdukStokKadaluarsaCreateNestedManyWithoutProdukInput
    produkKeluar?: ProdukKeluarCreateNestedManyWithoutProdukInput
  }

  export type ProdukUncheckedCreateWithoutProdukMasukInput = {
    id?: number
    nama: string
    merk: string
    kodeProduk: string
    kategori: $Enums.KategoriProduk
    hargaModal: number
    hargaJual: number
    stok?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    stokBatch?: ProdukStokKadaluarsaUncheckedCreateNestedManyWithoutProdukInput
    produkKeluar?: ProdukKeluarUncheckedCreateNestedManyWithoutProdukInput
  }

  export type ProdukCreateOrConnectWithoutProdukMasukInput = {
    where: ProdukWhereUniqueInput
    create: XOR<ProdukCreateWithoutProdukMasukInput, ProdukUncheckedCreateWithoutProdukMasukInput>
  }

  export type UserCreateWithoutProdukMasukInput = {
    name: string
    email: string
    password: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    produkKeluar?: ProdukKeluarCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProdukMasukInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    produkKeluar?: ProdukKeluarUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProdukMasukInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProdukMasukInput, UserUncheckedCreateWithoutProdukMasukInput>
  }

  export type ProdukUpsertWithoutProdukMasukInput = {
    update: XOR<ProdukUpdateWithoutProdukMasukInput, ProdukUncheckedUpdateWithoutProdukMasukInput>
    create: XOR<ProdukCreateWithoutProdukMasukInput, ProdukUncheckedCreateWithoutProdukMasukInput>
    where?: ProdukWhereInput
  }

  export type ProdukUpdateToOneWithWhereWithoutProdukMasukInput = {
    where?: ProdukWhereInput
    data: XOR<ProdukUpdateWithoutProdukMasukInput, ProdukUncheckedUpdateWithoutProdukMasukInput>
  }

  export type ProdukUpdateWithoutProdukMasukInput = {
    nama?: StringFieldUpdateOperationsInput | string
    merk?: StringFieldUpdateOperationsInput | string
    kodeProduk?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriProdukFieldUpdateOperationsInput | $Enums.KategoriProduk
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    stok?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stokBatch?: ProdukStokKadaluarsaUpdateManyWithoutProdukNestedInput
    produkKeluar?: ProdukKeluarUpdateManyWithoutProdukNestedInput
  }

  export type ProdukUncheckedUpdateWithoutProdukMasukInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    merk?: StringFieldUpdateOperationsInput | string
    kodeProduk?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriProdukFieldUpdateOperationsInput | $Enums.KategoriProduk
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    stok?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stokBatch?: ProdukStokKadaluarsaUncheckedUpdateManyWithoutProdukNestedInput
    produkKeluar?: ProdukKeluarUncheckedUpdateManyWithoutProdukNestedInput
  }

  export type UserUpsertWithoutProdukMasukInput = {
    update: XOR<UserUpdateWithoutProdukMasukInput, UserUncheckedUpdateWithoutProdukMasukInput>
    create: XOR<UserCreateWithoutProdukMasukInput, UserUncheckedCreateWithoutProdukMasukInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProdukMasukInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProdukMasukInput, UserUncheckedUpdateWithoutProdukMasukInput>
  }

  export type UserUpdateWithoutProdukMasukInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    produkKeluar?: ProdukKeluarUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProdukMasukInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    produkKeluar?: ProdukKeluarUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProdukCreateWithoutProdukKeluarInput = {
    nama: string
    merk: string
    kodeProduk: string
    kategori: $Enums.KategoriProduk
    hargaModal: number
    hargaJual: number
    stok?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    stokBatch?: ProdukStokKadaluarsaCreateNestedManyWithoutProdukInput
    produkMasuk?: ProdukMasukCreateNestedManyWithoutProdukInput
  }

  export type ProdukUncheckedCreateWithoutProdukKeluarInput = {
    id?: number
    nama: string
    merk: string
    kodeProduk: string
    kategori: $Enums.KategoriProduk
    hargaModal: number
    hargaJual: number
    stok?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    stokBatch?: ProdukStokKadaluarsaUncheckedCreateNestedManyWithoutProdukInput
    produkMasuk?: ProdukMasukUncheckedCreateNestedManyWithoutProdukInput
  }

  export type ProdukCreateOrConnectWithoutProdukKeluarInput = {
    where: ProdukWhereUniqueInput
    create: XOR<ProdukCreateWithoutProdukKeluarInput, ProdukUncheckedCreateWithoutProdukKeluarInput>
  }

  export type UserCreateWithoutProdukKeluarInput = {
    name: string
    email: string
    password: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    produkMasuk?: ProdukMasukCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProdukKeluarInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    produkMasuk?: ProdukMasukUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProdukKeluarInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProdukKeluarInput, UserUncheckedCreateWithoutProdukKeluarInput>
  }

  export type ProdukUpsertWithoutProdukKeluarInput = {
    update: XOR<ProdukUpdateWithoutProdukKeluarInput, ProdukUncheckedUpdateWithoutProdukKeluarInput>
    create: XOR<ProdukCreateWithoutProdukKeluarInput, ProdukUncheckedCreateWithoutProdukKeluarInput>
    where?: ProdukWhereInput
  }

  export type ProdukUpdateToOneWithWhereWithoutProdukKeluarInput = {
    where?: ProdukWhereInput
    data: XOR<ProdukUpdateWithoutProdukKeluarInput, ProdukUncheckedUpdateWithoutProdukKeluarInput>
  }

  export type ProdukUpdateWithoutProdukKeluarInput = {
    nama?: StringFieldUpdateOperationsInput | string
    merk?: StringFieldUpdateOperationsInput | string
    kodeProduk?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriProdukFieldUpdateOperationsInput | $Enums.KategoriProduk
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    stok?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stokBatch?: ProdukStokKadaluarsaUpdateManyWithoutProdukNestedInput
    produkMasuk?: ProdukMasukUpdateManyWithoutProdukNestedInput
  }

  export type ProdukUncheckedUpdateWithoutProdukKeluarInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    merk?: StringFieldUpdateOperationsInput | string
    kodeProduk?: StringFieldUpdateOperationsInput | string
    kategori?: EnumKategoriProdukFieldUpdateOperationsInput | $Enums.KategoriProduk
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    stok?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stokBatch?: ProdukStokKadaluarsaUncheckedUpdateManyWithoutProdukNestedInput
    produkMasuk?: ProdukMasukUncheckedUpdateManyWithoutProdukNestedInput
  }

  export type UserUpsertWithoutProdukKeluarInput = {
    update: XOR<UserUpdateWithoutProdukKeluarInput, UserUncheckedUpdateWithoutProdukKeluarInput>
    create: XOR<UserCreateWithoutProdukKeluarInput, UserUncheckedCreateWithoutProdukKeluarInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProdukKeluarInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProdukKeluarInput, UserUncheckedUpdateWithoutProdukKeluarInput>
  }

  export type UserUpdateWithoutProdukKeluarInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    produkMasuk?: ProdukMasukUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProdukKeluarInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    produkMasuk?: ProdukMasukUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProdukMasukCreateManyUserInput = {
    id?: number
    produkId: number
    jumlah: number
    hargaModal: number
    tanggalMasuk: Date | string
    tanggalExp?: Date | string | null
  }

  export type ProdukKeluarCreateManyUserInput = {
    id?: number
    produkId: number
    jumlah: number
    hargaModal: number
    hargaJual: number
    keuntungan: number
    status: $Enums.StatusKeluar
    tanggalKeluar: Date | string
  }

  export type ProdukMasukUpdateWithoutUserInput = {
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    tanggalMasuk?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    produk?: ProdukUpdateOneRequiredWithoutProdukMasukNestedInput
  }

  export type ProdukMasukUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    produkId?: IntFieldUpdateOperationsInput | number
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    tanggalMasuk?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdukMasukUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    produkId?: IntFieldUpdateOperationsInput | number
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    tanggalMasuk?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdukKeluarUpdateWithoutUserInput = {
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    keuntungan?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusKeluarFieldUpdateOperationsInput | $Enums.StatusKeluar
    tanggalKeluar?: DateTimeFieldUpdateOperationsInput | Date | string
    produk?: ProdukUpdateOneRequiredWithoutProdukKeluarNestedInput
  }

  export type ProdukKeluarUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    produkId?: IntFieldUpdateOperationsInput | number
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    keuntungan?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusKeluarFieldUpdateOperationsInput | $Enums.StatusKeluar
    tanggalKeluar?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdukKeluarUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    produkId?: IntFieldUpdateOperationsInput | number
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    keuntungan?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusKeluarFieldUpdateOperationsInput | $Enums.StatusKeluar
    tanggalKeluar?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdukStokKadaluarsaCreateManyProdukInput = {
    id?: number
    stokAwal: number
    sisaStok: number
    tanggalExp?: Date | string | null
  }

  export type ProdukMasukCreateManyProdukInput = {
    id?: number
    userId: number
    jumlah: number
    hargaModal: number
    tanggalMasuk: Date | string
    tanggalExp?: Date | string | null
  }

  export type ProdukKeluarCreateManyProdukInput = {
    id?: number
    userId: number
    jumlah: number
    hargaModal: number
    hargaJual: number
    keuntungan: number
    status: $Enums.StatusKeluar
    tanggalKeluar: Date | string
  }

  export type ProdukStokKadaluarsaUpdateWithoutProdukInput = {
    stokAwal?: IntFieldUpdateOperationsInput | number
    sisaStok?: IntFieldUpdateOperationsInput | number
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdukStokKadaluarsaUncheckedUpdateWithoutProdukInput = {
    id?: IntFieldUpdateOperationsInput | number
    stokAwal?: IntFieldUpdateOperationsInput | number
    sisaStok?: IntFieldUpdateOperationsInput | number
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdukStokKadaluarsaUncheckedUpdateManyWithoutProdukInput = {
    id?: IntFieldUpdateOperationsInput | number
    stokAwal?: IntFieldUpdateOperationsInput | number
    sisaStok?: IntFieldUpdateOperationsInput | number
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdukMasukUpdateWithoutProdukInput = {
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    tanggalMasuk?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutProdukMasukNestedInput
  }

  export type ProdukMasukUncheckedUpdateWithoutProdukInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    tanggalMasuk?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdukMasukUncheckedUpdateManyWithoutProdukInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    tanggalMasuk?: DateTimeFieldUpdateOperationsInput | Date | string
    tanggalExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProdukKeluarUpdateWithoutProdukInput = {
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    keuntungan?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusKeluarFieldUpdateOperationsInput | $Enums.StatusKeluar
    tanggalKeluar?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProdukKeluarNestedInput
  }

  export type ProdukKeluarUncheckedUpdateWithoutProdukInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    keuntungan?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusKeluarFieldUpdateOperationsInput | $Enums.StatusKeluar
    tanggalKeluar?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdukKeluarUncheckedUpdateManyWithoutProdukInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    jumlah?: IntFieldUpdateOperationsInput | number
    hargaModal?: FloatFieldUpdateOperationsInput | number
    hargaJual?: FloatFieldUpdateOperationsInput | number
    keuntungan?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusKeluarFieldUpdateOperationsInput | $Enums.StatusKeluar
    tanggalKeluar?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}